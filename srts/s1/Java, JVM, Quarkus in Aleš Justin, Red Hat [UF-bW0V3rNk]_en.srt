1
00:00:00,000 --> 00:00:23,000
Hello and welcome to a new episode of Ogrodje. Today we are here at the microphone with Alis Justin and with me is also Andraž Sraka.

2
00:00:23,000 --> 00:00:42,000
Today we will talk about Java, about JVM, about Java as a language, about Java as a religion, about how Java has changed over time,

3
00:00:42,000 --> 00:00:51,000
we will talk about Quarkus, we will talk about everything that is included in this ecosystem.

4
00:00:51,000 --> 00:01:02,000
It is a great honor for me to have Alis Justin with us today, who is a Senior Principal Engineer at Red Hat and a living legend.

5
00:01:02,000 --> 00:01:07,000
I forgot something in that intro, Andraž, would you like to add something?

6
00:01:07,000 --> 00:01:10,000
I don't know, I don't even know you, how long have we known each other?

7
00:01:10,000 --> 00:01:18,000
This is the beginning of my work at Red Hat, this is 2006.

8
00:01:19,000 --> 00:01:28,000
It was funny, I don't know how we met, but I contacted Justin because he had a Red Hat server that needed to be fixed.

9
00:01:28,000 --> 00:01:39,000
And then I met him in Vrhni Kopelu, in Mercator, right at the top, where you rent a table in a dark room.

10
00:01:39,000 --> 00:01:42,000
And there he was sitting and said, look, this is the server, it needs to be fixed.

11
00:01:42,000 --> 00:01:47,000
I don't remember if he was mad that they hacked it, or if something needed to be done.

12
00:01:47,000 --> 00:01:49,000
It was something like that.

13
00:01:49,000 --> 00:01:56,000
In my opinion, it wasn't a Jboss server, but a server, because I was the only software guy.

14
00:01:56,000 --> 00:02:01,000
And I think Tomas Cerar gave me your contact.

15
00:02:01,000 --> 00:02:09,000
He also met you at those events, but I don't know, he recommended you.

16
00:02:09,000 --> 00:02:16,000
I bought a server because I wanted to have my own tasks, even though there was no cloud.

17
00:02:16,000 --> 00:02:20,000
But I wanted to have my own builds, and I didn't have them on my computer.

18
00:02:20,000 --> 00:02:28,000
Because the computers weren't able to delegate my testing and everything to that server.

19
00:02:28,000 --> 00:02:30,000
I set it up nicely.

20
00:02:30,000 --> 00:02:35,000
I also hosted some friends, but I didn't have everyone at home.

21
00:02:35,000 --> 00:02:38,000
Yes, it was very interesting for me.

22
00:02:38,000 --> 00:02:43,000
Did you do it for free, or was it an unpaid bill?

23
00:02:43,000 --> 00:02:46,000
I think it was for beer.

24
00:02:46,000 --> 00:02:51,000
We all were very friendly at the time.

25
00:02:51,000 --> 00:02:58,000
My costumes were made of butter, which is on pizza and beer.

26
00:02:59,000 --> 00:03:03,000
It was interesting for me.

27
00:03:05,000 --> 00:03:12,000
When someone works on Red Hat, and I worked with Linux a lot,

28
00:03:12,000 --> 00:03:16,000
I met Red Hat from a different point of view.

29
00:03:16,000 --> 00:03:21,000
And you, as someone who has already been on Red Hat,

30
00:03:21,000 --> 00:03:27,000
you were a part of J-Boss.

31
00:03:27,000 --> 00:03:32,000
Red Hat already took J-Boss under its wings.

32
00:03:32,000 --> 00:03:37,000
How did you find yourself on Red Hat?

33
00:03:37,000 --> 00:03:42,000
Was it a dream job, or was it an opportunity?

34
00:03:42,000 --> 00:03:45,000
You were on Solveria, right?

35
00:03:45,000 --> 00:03:48,000
Yes, on Solveria Linux.

36
00:03:48,000 --> 00:03:51,000
It was interesting.

37
00:03:51,000 --> 00:03:55,000
When I was in high school, I used to go to Red Hat clubs.

38
00:03:55,000 --> 00:03:58,000
I used to say, this is really good.

39
00:03:58,000 --> 00:04:00,000
Melon was green.

40
00:04:00,000 --> 00:04:02,000
Yes, it was green.

41
00:04:02,000 --> 00:04:05,000
I also have a story about that.

42
00:04:05,000 --> 00:04:10,000
On Solveria, we had an interesting part on the farm.

43
00:04:10,000 --> 00:04:14,000
An energy software writer wrote about it.

44
00:04:14,000 --> 00:04:17,000
Of course, we weren't many.

45
00:04:17,000 --> 00:04:20,000
There was a J-Boss application server,

46
00:04:20,000 --> 00:04:24,000
and we thought, this is something we need.

47
00:04:24,000 --> 00:04:28,000
But even at the beginning of open source,

48
00:04:28,000 --> 00:04:31,000
it wasn't that popular.

49
00:04:31,000 --> 00:04:35,000
We used a lot of libraries, from J-Boss to Hibernate,

50
00:04:35,000 --> 00:04:37,000
to Spring.

51
00:04:37,000 --> 00:04:40,000
We started with Spring,

52
00:04:40,000 --> 00:04:43,000
then Tomcat, and then J-Boss.

53
00:04:43,000 --> 00:04:46,000
I thought, J-Boss is beautiful,

54
00:04:46,000 --> 00:04:49,000
and this is even better than that.

55
00:04:49,000 --> 00:04:52,000
But I had the code written in Spring,

56
00:04:52,000 --> 00:04:55,000
with the same Spring bins,

57
00:04:55,000 --> 00:04:58,000
and I didn't want to finish it.

58
00:04:58,000 --> 00:05:02,000
So I rewrote it, and wrote an integration,

59
00:05:02,000 --> 00:05:05,000
J-Boss application server for Spring,

60
00:05:05,000 --> 00:05:07,000
with Spring bins.

61
00:05:07,000 --> 00:05:10,000
So we moved on,

62
00:05:10,000 --> 00:05:14,000
and I was like, J-Boss, J-Boss, beautiful.

63
00:05:14,000 --> 00:05:18,000
And as a reward, I was sent to America.

64
00:05:18,000 --> 00:05:21,000
Did you write it in open source?

65
00:05:21,000 --> 00:05:24,000
No, I had it in Persep.

66
00:05:24,000 --> 00:05:26,000
The company sent it to you?

67
00:05:26,000 --> 00:05:28,000
No, the company sent it to me,

68
00:05:28,000 --> 00:05:30,000
not as a reward,

69
00:05:30,000 --> 00:05:32,000
but because I wrote it.

70
00:05:32,000 --> 00:05:34,000
So I went to Java,

71
00:05:35,000 --> 00:05:38,000
and talked to Bill Burke,

72
00:05:38,000 --> 00:05:41,000
who was in charge of J-Boss application server,

73
00:05:41,000 --> 00:05:43,000
and he explained it to me,

74
00:05:43,000 --> 00:05:46,000
and said, yes, you can integrate it.

75
00:05:46,000 --> 00:05:49,000
For example, we have Spring Deployer,

76
00:05:49,000 --> 00:05:51,000
and I was like, wow,

77
00:05:51,000 --> 00:05:53,000
how did I write that?

78
00:05:53,000 --> 00:05:55,000
I hadn't seen it,

79
00:05:55,000 --> 00:05:57,000
so how did I write it?

80
00:05:57,000 --> 00:05:59,000
So we had laptops,

81
00:05:59,000 --> 00:06:01,000
and I went home,

82
00:06:01,000 --> 00:06:03,000
and I found Spring Deployer,

83
00:06:03,000 --> 00:06:05,000
but I couldn't find it.

84
00:06:05,000 --> 00:06:07,000
So I was like, ok,

85
00:06:07,000 --> 00:06:09,000
I wrote to Zafor,

86
00:06:09,000 --> 00:06:11,000
I listened to your talk,

87
00:06:11,000 --> 00:06:13,000
I looked for Spring Deployer,

88
00:06:13,000 --> 00:06:15,000
but I couldn't find it.

89
00:06:15,000 --> 00:06:17,000
So I wrote my own,

90
00:06:17,000 --> 00:06:19,000
and I was like, what is this?

91
00:06:19,000 --> 00:06:21,000
And he answered me,

92
00:06:21,000 --> 00:06:23,000
and I was like, oh no,

93
00:06:23,000 --> 00:06:25,000
I said it in theory,

94
00:06:25,000 --> 00:06:27,000
because Spring was popular.

95
00:06:27,000 --> 00:06:29,000
So I was like,

96
00:06:29,000 --> 00:06:31,000
it works,

97
00:06:31,000 --> 00:06:33,000
you can show it to me.

98
00:06:33,000 --> 00:06:35,000
So there was no GitHub,

99
00:06:35,000 --> 00:06:37,000
and we also had private,

100
00:06:37,000 --> 00:06:39,000
no, Microsoft,

101
00:06:39,000 --> 00:06:41,000
and VSS,

102
00:06:41,000 --> 00:06:43,000
so we had a lot of help.

103
00:06:43,000 --> 00:06:45,000
A lot of help.

104
00:06:45,000 --> 00:06:47,000
So you took a contract

105
00:06:47,000 --> 00:06:49,000
for everything else,

106
00:06:49,000 --> 00:06:51,000
and you couldn't do anything else.

107
00:06:51,000 --> 00:06:53,000
So I asked everyone in the service,

108
00:06:53,000 --> 00:06:55,000
can I use it?

109
00:06:55,000 --> 00:06:57,000
And they said, yes,

110
00:06:57,000 --> 00:06:59,000
but there was already

111
00:06:59,000 --> 00:07:01,000
a contract,

112
00:07:01,000 --> 00:07:03,000
and I gave it to Sourceforge,

113
00:07:03,000 --> 00:07:05,000
if I remember correctly.

114
00:07:05,000 --> 00:07:07,000
And when I saw it,

115
00:07:07,000 --> 00:07:09,000
I was like,

116
00:07:09,000 --> 00:07:11,000
that's exactly what I wanted.

117
00:07:11,000 --> 00:07:13,000
I wanted to contribute to it.

118
00:07:13,000 --> 00:07:15,000
And then I, yeah,

119
00:07:15,000 --> 00:07:17,000
I re-wrote that there was

120
00:07:17,000 --> 00:07:19,000
a Jboss package,

121
00:07:19,000 --> 00:07:21,000
I gave them some documents,

122
00:07:21,000 --> 00:07:23,000
an info queue,

123
00:07:23,000 --> 00:07:25,000
documentation,

124
00:07:25,000 --> 00:07:27,000
and it wasn't a special

125
00:07:27,000 --> 00:07:29,000
download for a long time.

126
00:07:29,000 --> 00:07:31,000
There weren't a lot of downloads.

127
00:07:31,000 --> 00:07:33,000
And then,

128
00:07:33,000 --> 00:07:35,000
when they said,

129
00:07:35,000 --> 00:07:37,000
and I fixed it,

130
00:07:37,000 --> 00:07:39,000
I patched Hibernate,

131
00:07:39,000 --> 00:07:41,000
Jboss portal,

132
00:07:41,000 --> 00:07:43,000
Jboss,

133
00:07:43,000 --> 00:07:45,000
and then Jboss World,

134
00:07:45,000 --> 00:07:47,000
and they invited me

135
00:07:47,000 --> 00:07:49,000
to Jboss World,

136
00:07:49,000 --> 00:07:51,000
and I was a bit confused,

137
00:07:51,000 --> 00:07:53,000
because they were really busy.

138
00:07:53,000 --> 00:07:55,000
They were talking about

139
00:07:55,000 --> 00:07:57,000
Jboss Spring Deployer.

140
00:07:57,000 --> 00:07:59,000
I was getting ready,

141
00:07:59,000 --> 00:08:01,000
and then Flurry,

142
00:08:01,000 --> 00:08:03,000
who was the owner,

143
00:08:03,000 --> 00:08:05,000
and Scott Stark,

144
00:08:05,000 --> 00:08:07,000
who was the Chief of Technology,

145
00:08:07,000 --> 00:08:09,000
and Chief Scientist,

146
00:08:09,000 --> 00:08:11,000
Adrian Brock,

147
00:08:11,000 --> 00:08:13,000
and Gavin King,

148
00:08:13,000 --> 00:08:15,000
came to me,

149
00:08:15,000 --> 00:08:17,000
and Flurry was like,

150
00:08:17,000 --> 00:08:19,000
thank you,

151
00:08:19,000 --> 00:08:21,000
can we talk?

152
00:08:21,000 --> 00:08:23,000
And I was like,

153
00:08:23,000 --> 00:08:25,000
why are you doing this for us,

154
00:08:25,000 --> 00:08:27,000
8 hours a day?

155
00:08:27,000 --> 00:08:29,000
And that was it.

156
00:08:29,000 --> 00:08:31,000
I was a bit crazy,

157
00:08:31,000 --> 00:08:33,000
but that's it.

158
00:08:33,000 --> 00:08:35,000
Dejansko was a science service

159
00:08:35,000 --> 00:08:37,000
at the time.

160
00:08:37,000 --> 00:08:39,000
I think it still is today.

161
00:08:39,000 --> 00:08:41,000
Yes, it still is.

162
00:08:41,000 --> 00:08:43,000
I mean,

163
00:08:43,000 --> 00:08:45,000
only a small percentage of people

164
00:08:45,000 --> 00:08:47,000
live from open source directly.

165
00:08:47,000 --> 00:08:49,000
Yes, but a lot of people

166
00:08:49,000 --> 00:08:51,000
have more opportunities

167
00:08:51,000 --> 00:08:53,000
in the field of

168
00:08:53,000 --> 00:08:55,000
open source engineering.

169
00:08:55,000 --> 00:08:57,000
I mean, an engineer working with open source

170
00:08:57,000 --> 00:08:59,000
at the time, definitely.

171
00:08:59,000 --> 00:09:01,000
I came home that time,

172
00:09:01,000 --> 00:09:03,000
I don't know, two brothers,

173
00:09:03,000 --> 00:09:05,000
and I walked around the office,

174
00:09:05,000 --> 00:09:07,000
and I didn't know anyone.

175
00:09:07,000 --> 00:09:09,000
They told me,

176
00:09:09,000 --> 00:09:11,000
you work from home,

177
00:09:11,000 --> 00:09:13,000
we can move you to Switzerland,

178
00:09:13,000 --> 00:09:15,000
we can move you to Atlanta,

179
00:09:15,000 --> 00:09:17,000
you know where,

180
00:09:17,000 --> 00:09:19,000
and I was like, no,

181
00:09:19,000 --> 00:09:21,000
I'll just work from home.

182
00:09:21,000 --> 00:09:23,000
And how can I move you?

183
00:09:23,000 --> 00:09:25,000
And they didn't know

184
00:09:25,000 --> 00:09:27,000
that there was still Slovenia,

185
00:09:27,000 --> 00:09:29,000
at one point it was called Solvenia,

186
00:09:29,000 --> 00:09:31,000
and so on.

187
00:09:31,000 --> 00:09:33,000
And how can I pay you?

188
00:09:33,000 --> 00:09:35,000
How can I pay you?

189
00:09:35,000 --> 00:09:37,000
But we changed.

190
00:09:37,000 --> 00:09:39,000
So,

191
00:09:39,000 --> 00:09:41,000
that's how it started.

192
00:09:41,000 --> 00:09:43,000
And then, I don't know,

193
00:09:43,000 --> 00:09:45,000
from home.

194
00:09:45,000 --> 00:09:47,000
You don't have to know

195
00:09:47,000 --> 00:09:49,000
what you have to do.

196
00:09:49,000 --> 00:09:51,000
If you're at home,

197
00:09:51,000 --> 00:09:53,000
you can take off your pajamas.

198
00:09:53,000 --> 00:09:55,000
But you don't have to know anything,

199
00:09:55,000 --> 00:09:57,000
because you can find

200
00:09:57,000 --> 00:09:59,000
the job yourself.

201
00:09:59,000 --> 00:10:01,000
So, once a week,

202
00:10:01,000 --> 00:10:03,000
we heard each other

203
00:10:03,000 --> 00:10:05,000
through some phone calls,

204
00:10:05,000 --> 00:10:07,000
which I had all over the country,

205
00:10:07,000 --> 00:10:09,000
and you could call for free,

206
00:10:09,000 --> 00:10:11,000
because there were no video calls yet.

207
00:10:11,000 --> 00:10:13,000
And through the forum,

208
00:10:13,000 --> 00:10:15,000
Djira was already there,

209
00:10:15,000 --> 00:10:17,000
we were in Djira,

210
00:10:17,000 --> 00:10:19,000
and a lot of people on the forum

211
00:10:19,000 --> 00:10:21,000
were writing to each other,

212
00:10:21,000 --> 00:10:23,000
because we were in different

213
00:10:23,000 --> 00:10:25,000
passes, so there was no chat.

214
00:10:25,000 --> 00:10:27,000
And you were part of

215
00:10:27,000 --> 00:10:29,000
the J-Boss team.

216
00:10:29,000 --> 00:10:31,000
Yes, exactly.

217
00:10:31,000 --> 00:10:33,000
But J-Boss wasn't under Red Hat yet,

218
00:10:33,000 --> 00:10:35,000
when you were there.

219
00:10:35,000 --> 00:10:37,000
When I was there,

220
00:10:37,000 --> 00:10:39,000
I wasn't there yet,

221
00:10:39,000 --> 00:10:41,000
because that's how they called me.

222
00:10:41,000 --> 00:10:43,000
Red Hat was there,

223
00:10:43,000 --> 00:10:45,000
when they called me,

224
00:10:45,000 --> 00:10:47,000
and we could wait a bit.

225
00:10:47,000 --> 00:10:49,000
I was in the office,

226
00:10:49,000 --> 00:10:51,000
so I could answer and wait.

227
00:10:51,000 --> 00:10:53,000
And they said,

228
00:10:53,000 --> 00:10:55,000
let's wait until we

229
00:10:55,000 --> 00:10:57,000
merge with Red Hat,

230
00:10:57,000 --> 00:10:59,000
and then we can onboard.

231
00:10:59,000 --> 00:11:01,000
At this point,

232
00:11:01,000 --> 00:11:03,000
can I ask you

233
00:11:03,000 --> 00:11:05,000
for our listeners,

234
00:11:05,000 --> 00:11:07,000
who don't know much about JVM

235
00:11:07,000 --> 00:11:09,000
and the Java ecosystem,

236
00:11:09,000 --> 00:11:11,000
what is J-Boss,

237
00:11:11,000 --> 00:11:13,000
and why do you need it?

238
00:11:13,000 --> 00:11:15,000
J-Boss, in the beginning,

239
00:11:15,000 --> 00:11:17,000
when it was a company,

240
00:11:17,000 --> 00:11:19,000
when it grew around

241
00:11:19,000 --> 00:11:21,000
the J-Boss application server,

242
00:11:21,000 --> 00:11:23,000
you are

243
00:11:23,000 --> 00:11:25,000
the main specification,

244
00:11:25,000 --> 00:11:27,000
and in a certain way

245
00:11:27,000 --> 00:11:29,000
you can

246
00:11:29,000 --> 00:11:31,000
put your application

247
00:11:31,000 --> 00:11:33,000
in the application server,

248
00:11:33,000 --> 00:11:35,000
and it helps you

249
00:11:35,000 --> 00:11:37,000
in various aspects,

250
00:11:37,000 --> 00:11:39,000
like web storage,

251
00:11:39,000 --> 00:11:41,000
how transactions work,

252
00:11:41,000 --> 00:11:43,000
security,

253
00:11:43,000 --> 00:11:45,000
connection pooling,

254
00:11:45,000 --> 00:11:47,000
and so on.

255
00:11:47,000 --> 00:11:49,000
You don't need it all by yourself,

256
00:11:49,000 --> 00:11:51,000
but after specifications

257
00:11:51,000 --> 00:11:53,000
and using standard apps,

258
00:11:53,000 --> 00:11:55,000
you can write

259
00:11:55,000 --> 00:11:57,000
and use your application.

260
00:11:57,000 --> 00:11:59,000
Plus,

261
00:11:59,000 --> 00:12:01,000
this application is portable

262
00:12:01,000 --> 00:12:03,000
among different application servers.

263
00:12:03,000 --> 00:12:05,000
J-Boss was

264
00:12:05,000 --> 00:12:07,000
one of the first

265
00:12:07,000 --> 00:12:09,000
open source,

266
00:12:09,000 --> 00:12:11,000
free application servers.

267
00:12:11,000 --> 00:12:13,000
You had it,

268
00:12:13,000 --> 00:12:15,000
AVI had its own

269
00:12:15,000 --> 00:12:17,000
web server,

270
00:12:17,000 --> 00:12:19,000
BA had WebLogic,

271
00:12:19,000 --> 00:12:21,000
Oracle had

272
00:12:21,000 --> 00:12:23,000
its own

273
00:12:23,000 --> 00:12:25,000
application server.

274
00:12:25,000 --> 00:12:27,000
Oracle application server?

275
00:12:27,000 --> 00:12:29,000
Yes.

276
00:12:29,000 --> 00:12:31,000
J-Boss was the first

277
00:12:31,000 --> 00:12:33,000
open source.

278
00:12:33,000 --> 00:12:35,000
Tomcat differs from J-Boss.

279
00:12:35,000 --> 00:12:37,000
J-Boss is bigger than Tomcat?

280
00:12:37,000 --> 00:12:39,000
Yes.

281
00:12:39,000 --> 00:12:41,000
Tomcat was part of J-Boss.

282
00:12:41,000 --> 00:12:43,000
Tomcat is only web storage.

283
00:12:43,000 --> 00:12:45,000
There was a connection pool

284
00:12:45,000 --> 00:12:47,000
hidden inside,

285
00:12:47,000 --> 00:12:49,000
which helped you

286
00:12:49,000 --> 00:12:51,000
use it.

287
00:12:51,000 --> 00:12:53,000
Tomcat was

288
00:12:53,000 --> 00:12:55,000
designed to be

289
00:12:55,000 --> 00:12:57,000
embedded in J-Boss application server.

290
00:12:57,000 --> 00:12:59,000
Let's

291
00:12:59,000 --> 00:13:01,000
talk about this a bit more.

292
00:13:01,000 --> 00:13:03,000
Back in the day,

293
00:13:03,000 --> 00:13:05,000
you bought

294
00:13:05,000 --> 00:13:07,000
a bare metal server,

295
00:13:07,000 --> 00:13:09,000
you installed Linux on it,

296
00:13:09,000 --> 00:13:11,000
which was a distribution,

297
00:13:11,000 --> 00:13:13,000
if you were a real company,

298
00:13:13,000 --> 00:13:15,000
it was a distribution with

299
00:13:15,000 --> 00:13:17,000
support,

300
00:13:17,000 --> 00:13:19,000
SUSE, Red Hat,

301
00:13:19,000 --> 00:13:21,000
CentOS.

302
00:13:21,000 --> 00:13:23,000
CentOS, OK.

303
00:13:23,000 --> 00:13:25,000
Then you installed

304
00:13:25,000 --> 00:13:27,000
Java directly on

305
00:13:27,000 --> 00:13:29,000
the Linux,

306
00:13:29,000 --> 00:13:31,000
and the application server.

307
00:13:31,000 --> 00:13:33,000
Then people developed

308
00:13:33,000 --> 00:13:35,000
applications on their

309
00:13:35,000 --> 00:13:37,000
machines, they packed them

310
00:13:37,000 --> 00:13:39,000
in VARs,

311
00:13:39,000 --> 00:13:41,000
and then you grouped them

312
00:13:41,000 --> 00:13:43,000
in the application server.

313
00:13:43,000 --> 00:13:45,000
Yes,

314
00:13:45,000 --> 00:13:47,000
a particular director

315
00:13:47,000 --> 00:13:49,000
gave you this job.

316
00:13:49,000 --> 00:13:51,000
There was a scanner

317
00:13:51,000 --> 00:13:53,000
that looked through

318
00:13:53,000 --> 00:13:55,000
to see if anything had changed inside.

319
00:13:55,000 --> 00:13:57,000
Then you got to know the structure.

320
00:13:57,000 --> 00:13:59,000
When you wrote this,

321
00:13:59,000 --> 00:14:01,000
there were thousands of possibilities.

322
00:14:01,000 --> 00:14:03,000
J-Boss was not only open source,

323
00:14:03,000 --> 00:14:05,000
it was also

324
00:14:05,000 --> 00:14:07,000
very expandable.

325
00:14:07,000 --> 00:14:09,000
The other

326
00:14:09,000 --> 00:14:11,000
servers

327
00:14:11,000 --> 00:14:13,000
had

328
00:14:13,000 --> 00:14:15,000
minimal packages,

329
00:14:15,000 --> 00:14:17,000
monolithic,

330
00:14:17,000 --> 00:14:19,000
you couldn't do much.

331
00:14:19,000 --> 00:14:21,000
Probably not enough vendor lock-in.

332
00:14:21,000 --> 00:14:23,000
You were limited.

333
00:14:23,000 --> 00:14:25,000
When you wrote for one,

334
00:14:25,000 --> 00:14:27,000
you had limited features.

335
00:14:27,000 --> 00:14:29,000
Yes, limited features.

336
00:14:29,000 --> 00:14:31,000
Let me ask you this.

337
00:14:31,000 --> 00:14:33,000
For the listeners

338
00:14:33,000 --> 00:14:35,000
who use

339
00:14:35,000 --> 00:14:37,000
or grew up

340
00:14:37,000 --> 00:14:39,000
with containers,

341
00:14:41,000 --> 00:14:43,000
what was the advantage?

342
00:14:43,000 --> 00:14:45,000
Why did you do it this way?

343
00:14:45,000 --> 00:14:47,000
Why did you need an application server?

344
00:14:47,000 --> 00:14:49,000
Why didn't you write Java applications?

345
00:14:49,000 --> 00:14:51,000
Java applications are directly exposed

346
00:14:51,000 --> 00:14:53,000
on the Internet.

347
00:14:53,000 --> 00:14:55,000
You wanted...

348
00:14:55,000 --> 00:14:57,000
What was the big advantage?

349
00:14:57,000 --> 00:14:59,000
J-Boss could

350
00:14:59,000 --> 00:15:01,000
have abstracted

351
00:15:01,000 --> 00:15:03,000
it to look like a Docker.

352
00:15:03,000 --> 00:15:05,000
You wrote

353
00:15:05,000 --> 00:15:07,000
your own application

354
00:15:07,000 --> 00:15:09,000
and put it in J-Boss.

355
00:15:09,000 --> 00:15:11,000
I could have done that, yes.

356
00:15:11,000 --> 00:15:13,000
The advantage was

357
00:15:13,000 --> 00:15:15,000
what I created.

358
00:15:15,000 --> 00:15:17,000
You had transactions,

359
00:15:17,000 --> 00:15:19,000
you had a web where you stored it,

360
00:15:19,000 --> 00:15:21,000
you had security,

361
00:15:21,000 --> 00:15:23,000
and so on.

362
00:15:23,000 --> 00:15:25,000
You didn't need to write that.

363
00:15:25,000 --> 00:15:27,000
It was a kind of standard.

364
00:15:27,000 --> 00:15:29,000
As Andraž said,

365
00:15:29,000 --> 00:15:31,000
it could have gone beyond

366
00:15:31,000 --> 00:15:33,000
the standard specifications.

367
00:15:33,000 --> 00:15:35,000
Sometimes you could,

368
00:15:35,000 --> 00:15:37,000
so you could have added something.

369
00:15:37,000 --> 00:15:39,000
But as I said,

370
00:15:39,000 --> 00:15:41,000
you weren't an expert

371
00:15:41,000 --> 00:15:43,000
for transactions.

372
00:15:43,000 --> 00:15:45,000
You wanted to use transactions,

373
00:15:45,000 --> 00:15:47,000
so you wrote it yourself.

374
00:15:47,000 --> 00:15:49,000
It's OK if you do it

375
00:15:49,000 --> 00:15:51,000
the right way.

376
00:15:51,000 --> 00:15:53,000
But then you get confused.

377
00:15:53,000 --> 00:15:55,000
There are rollbacks, commits,

378
00:15:55,000 --> 00:15:57,000
and you let people

379
00:15:57,000 --> 00:15:59,000
who are really good at transactions

380
00:15:59,000 --> 00:16:01,000
come to J-Boss

381
00:16:01,000 --> 00:16:03,000
and buy a firm

382
00:16:03,000 --> 00:16:05,000
which is...

383
00:16:05,000 --> 00:16:07,000
The transaction engine

384
00:16:07,000 --> 00:16:09,000
was a man from the academic world

385
00:16:09,000 --> 00:16:11,000
who studied

386
00:16:11,000 --> 00:16:13,000
these transaction systems

387
00:16:13,000 --> 00:16:15,000
for 20 years.

388
00:16:15,000 --> 00:16:17,000
From the very old ones

389
00:16:17,000 --> 00:16:19,000
you could write

390
00:16:19,000 --> 00:16:21,000
transaction engine.

391
00:16:21,000 --> 00:16:23,000
But you wouldn't trust him

392
00:16:23,000 --> 00:16:25,000
to do it properly.

393
00:16:25,000 --> 00:16:27,000
You got used to it.

394
00:16:27,000 --> 00:16:29,000
It was worth it.

395
00:16:29,000 --> 00:16:31,000
You didn't have to write it yourself.

396
00:16:31,000 --> 00:16:33,000
My experience

397
00:16:33,000 --> 00:16:35,000
with J-Boss

398
00:16:35,000 --> 00:16:37,000
was when I worked for Telco.

399
00:16:39,000 --> 00:16:41,000
You used to boot

400
00:16:41,000 --> 00:16:43,000
this part.

401
00:16:43,000 --> 00:16:45,000
Before you went to the mall,

402
00:16:45,000 --> 00:16:47,000
you could use this part.

403
00:16:47,000 --> 00:16:49,000
The startup time

404
00:16:49,000 --> 00:16:51,000
of these application servers

405
00:16:51,000 --> 00:16:53,000
is legendary.

406
00:16:53,000 --> 00:16:55,000
People installed

407
00:16:55,000 --> 00:16:57,000
not just one,

408
00:16:57,000 --> 00:16:59,000
but all three of them.

409
00:16:59,000 --> 00:17:01,000
It was a well-known problem.

410
00:17:05,000 --> 00:17:07,000
I used three versions.

411
00:17:07,000 --> 00:17:09,000
I used four,

412
00:17:09,000 --> 00:17:11,000
five, six, seven versions.

413
00:17:11,000 --> 00:17:13,000
Four was like this.

414
00:17:13,000 --> 00:17:15,000
You could scan everything,

415
00:17:15,000 --> 00:17:17,000
look at everything

416
00:17:17,000 --> 00:17:19,000
you had inside,

417
00:17:19,000 --> 00:17:21,000
delete everything

418
00:17:21,000 --> 00:17:23,000
in the descriptor,

419
00:17:23,000 --> 00:17:25,000
configure them,

420
00:17:25,000 --> 00:17:27,000
instance them,

421
00:17:27,000 --> 00:17:29,000
and so on.

422
00:17:29,000 --> 00:17:31,000
If there was a bigger application,

423
00:17:31,000 --> 00:17:33,000
it would be worse.

424
00:17:33,000 --> 00:17:35,000
With TPoE, it was even better.

425
00:17:35,000 --> 00:17:37,000
We didn't work for one side.

426
00:17:37,000 --> 00:17:39,000
We worked for a group of people.

427
00:17:39,000 --> 00:17:41,000
It took a couple of minutes.

428
00:17:45,000 --> 00:17:47,000
The fifth mission

429
00:17:47,000 --> 00:17:49,000
was a bit more manageable,

430
00:17:49,000 --> 00:17:51,000
but we didn't do much with the deployment.

431
00:17:51,000 --> 00:17:53,000
We only had six.

432
00:17:53,000 --> 00:17:55,000
The seventh was

433
00:17:55,000 --> 00:17:57,000
done on purpose.

434
00:17:57,000 --> 00:17:59,000
The seventh was Wildfly?

435
00:17:59,000 --> 00:18:01,000
Yes, the seventh was Wildfly.

436
00:18:01,000 --> 00:18:03,000
Was Wildfly a rewrite?

437
00:18:03,000 --> 00:18:05,000
Yes, it was practically

438
00:18:05,000 --> 00:18:07,000
from scratch.

439
00:18:07,000 --> 00:18:09,000
We didn't implement

440
00:18:09,000 --> 00:18:11,000
the transactions,

441
00:18:11,000 --> 00:18:13,000
but the kernel,

442
00:18:13,000 --> 00:18:15,000
the core,

443
00:18:15,000 --> 00:18:17,000
was written from scratch.

444
00:18:17,000 --> 00:18:19,000
As we saw,

445
00:18:19,000 --> 00:18:21,000
I was one of the authors

446
00:18:21,000 --> 00:18:23,000
of the microcontainer kernel,

447
00:18:23,000 --> 00:18:25,000
kernel five and six.

448
00:18:27,000 --> 00:18:29,000
We wanted too much.

449
00:18:31,000 --> 00:18:33,000
We were crazy about

450
00:18:33,000 --> 00:18:35,000
the attack stuff.

451
00:18:35,000 --> 00:18:37,000
The application server

452
00:18:37,000 --> 00:18:39,000
wasn't a monolith.

453
00:18:39,000 --> 00:18:41,000
You could have

454
00:18:41,000 --> 00:18:43,000
one or two M-bins,

455
00:18:43,000 --> 00:18:45,000
and those M-bins

456
00:18:45,000 --> 00:18:47,000
were stored in the kernel.

457
00:18:47,000 --> 00:18:49,000
It was a big kernel,

458
00:18:49,000 --> 00:18:51,000
with 100-200 M-bins.

459
00:18:51,000 --> 00:18:53,000
It was like Jamex,

460
00:18:53,000 --> 00:18:55,000
where you had to write

461
00:18:55,000 --> 00:18:57,000
a lot of stuff.

462
00:18:57,000 --> 00:18:59,000
We said, okay,

463
00:18:59,000 --> 00:19:01,000
let's make five carapaces

464
00:19:01,000 --> 00:19:03,000
and one M-bin.

465
00:19:03,000 --> 00:19:05,000
Then we said,

466
00:19:05,000 --> 00:19:07,000
now we have to

467
00:19:07,000 --> 00:19:09,000
support the services

468
00:19:09,000 --> 00:19:11,000
in the kernel.

469
00:19:11,000 --> 00:19:13,000
We wrote a super abstract kernel,

470
00:19:13,000 --> 00:19:15,000
which supports all possible

471
00:19:15,000 --> 00:19:17,000
services.

472
00:19:17,000 --> 00:19:19,000
Let me interrupt you.

473
00:19:19,000 --> 00:19:21,000
You came up with

474
00:19:21,000 --> 00:19:23,000
the features,

475
00:19:23,000 --> 00:19:25,000
and it was good.

476
00:19:25,000 --> 00:19:27,000
Did you get the community

477
00:19:27,000 --> 00:19:29,000
or the commercial part

478
00:19:29,000 --> 00:19:31,000
of Red Hat,

479
00:19:31,000 --> 00:19:33,000
and why did you support it?

480
00:19:33,000 --> 00:19:35,000
You could see

481
00:19:35,000 --> 00:19:37,000
where the world was going.

482
00:19:37,000 --> 00:19:39,000
Spring was very popular.

483
00:19:39,000 --> 00:19:41,000
Spring had a lot of

484
00:19:41,000 --> 00:19:43,000
ordinary M-bins,

485
00:19:43,000 --> 00:19:45,000
which made the application

486
00:19:45,000 --> 00:19:47,000
much easier for you.

487
00:19:47,000 --> 00:19:49,000
People came to us,

488
00:19:49,000 --> 00:19:51,000
and we had pages

489
00:19:51,000 --> 00:19:53,000
that weren't that good.

490
00:19:53,000 --> 00:19:55,000
Spring had a lot of M-bins,

491
00:19:55,000 --> 00:19:57,000
but they had a lot of MXs.

492
00:19:57,000 --> 00:19:59,000
We also had OSGi,

493
00:19:59,000 --> 00:20:01,000
which was very popular.

494
00:20:01,000 --> 00:20:03,000
Everyone was running OSGi.

495
00:20:03,000 --> 00:20:05,000
We also had OSGi services.

496
00:20:05,000 --> 00:20:07,000
We wanted to try it out.

497
00:20:07,000 --> 00:20:09,000
I don't know,

498
00:20:09,000 --> 00:20:11,000
we remembered the features.

499
00:20:11,000 --> 00:20:13,000
Today we said,

500
00:20:13,000 --> 00:20:15,000
let's combine it all.

501
00:20:15,000 --> 00:20:17,000
We did,

502
00:20:17,000 --> 00:20:19,000
but we didn't have a problem.

503
00:20:19,000 --> 00:20:21,000
We never stopped working.

504
00:20:21,000 --> 00:20:23,000
Then we tried all possible ways

505
00:20:23,000 --> 00:20:25,000
to make it faster.

506
00:20:25,000 --> 00:20:27,000
But it didn't work.

507
00:20:27,000 --> 00:20:29,000
We didn't just do a rewrite,

508
00:20:29,000 --> 00:20:31,000
and then we said,

509
00:20:31,000 --> 00:20:33,000
let's do M-bins.

510
00:20:33,000 --> 00:20:35,000
But Wildfly was in the marketing

511
00:20:35,000 --> 00:20:37,000
that it was the fastest product.

512
00:20:37,000 --> 00:20:39,000
Yes, it was.

513
00:20:39,000 --> 00:20:41,000
Before,

514
00:20:41,000 --> 00:20:43,000
there was a lot of one-click,

515
00:20:43,000 --> 00:20:45,000
one-reflection,

516
00:20:45,000 --> 00:20:47,000
and everything was dynamic.

517
00:20:47,000 --> 00:20:49,000
With Wildfly,

518
00:20:49,000 --> 00:20:51,000
we said,

519
00:20:51,000 --> 00:20:53,000
let's go back to the hands.

520
00:20:53,000 --> 00:20:55,000
You touched it a bit.

521
00:20:55,000 --> 00:20:57,000
When you have a service,

522
00:20:57,000 --> 00:20:59,000
you have to touch it

523
00:20:59,000 --> 00:21:01,000
as if it were a hand.

524
00:21:01,000 --> 00:21:03,000
If you touch it more than once,

525
00:21:03,000 --> 00:21:05,000
the service will be faster.

526
00:21:05,000 --> 00:21:07,000
You won't touch it with one-reflection.

527
00:21:07,000 --> 00:21:09,000
It really helped.

528
00:21:09,000 --> 00:21:11,000
What I changed,

529
00:21:11,000 --> 00:21:13,000
not only the bins,

530
00:21:13,000 --> 00:21:15,000
we also had a class-loading model,

531
00:21:15,000 --> 00:21:17,000
which could support the old one.

532
00:21:17,000 --> 00:21:19,000
It was super-hierarchical,

533
00:21:19,000 --> 00:21:21,000
with four pockets.

534
00:21:21,000 --> 00:21:23,000
Then the new one,

535
00:21:23,000 --> 00:21:25,000
which could also support

536
00:21:25,000 --> 00:21:27,000
different dependencies.

537
00:21:27,000 --> 00:21:29,000
We also supported

538
00:21:29,000 --> 00:21:31,000
the OSGIO class-loading model.

539
00:21:31,000 --> 00:21:33,000
We had a class-loading layer,

540
00:21:33,000 --> 00:21:35,000
and thousands of things worked.

541
00:21:37,000 --> 00:21:39,000
In Wildfly,

542
00:21:39,000 --> 00:21:41,000
there were strictly modules.

543
00:21:41,000 --> 00:21:43,000
Modules could be specified,

544
00:21:43,000 --> 00:21:45,000
one by one.

545
00:21:45,000 --> 00:21:47,000
Mapping, and then

546
00:21:47,000 --> 00:21:49,000
it looked at what was specified,

547
00:21:49,000 --> 00:21:51,000
and put it together.

548
00:21:51,000 --> 00:21:53,000
It wasn't like

549
00:21:53,000 --> 00:21:55,000
they wanted to be smarter,

550
00:21:55,000 --> 00:21:57,000
like we wanted to be smart.

551
00:21:57,000 --> 00:21:59,000
We wanted to be smart,

552
00:21:59,000 --> 00:22:01,000
and the user could enter

553
00:22:01,000 --> 00:22:03,000
whatever he wanted.

554
00:22:03,000 --> 00:22:05,000
Excuse me,

555
00:22:05,000 --> 00:22:07,000
I can ask you this.

556
00:22:09,000 --> 00:22:11,000
Who defines

557
00:22:11,000 --> 00:22:13,000
the roadmap,

558
00:22:13,000 --> 00:22:15,000
the specifications,

559
00:22:15,000 --> 00:22:17,000
how do you think

560
00:22:17,000 --> 00:22:19,000
which features will go

561
00:22:19,000 --> 00:22:21,000
into Wildfly?

562
00:22:21,000 --> 00:22:23,000
Who dictates it?

563
00:22:23,000 --> 00:22:25,000
Do you dictate it,

564
00:22:25,000 --> 00:22:27,000
together with the parties?

565
00:22:27,000 --> 00:22:29,000
Is it a myth?

566
00:22:31,000 --> 00:22:33,000
How does the roadmap look like?

567
00:22:35,000 --> 00:22:37,000
It's interesting

568
00:22:37,000 --> 00:22:39,000
how it changed over time.

569
00:22:39,000 --> 00:22:41,000
Let's start here,

570
00:22:41,000 --> 00:22:43,000
when we were at JBoss.

571
00:22:45,000 --> 00:22:47,000
There was a party,

572
00:22:47,000 --> 00:22:49,000
and they didn't dictate

573
00:22:49,000 --> 00:22:51,000
any features.

574
00:22:51,000 --> 00:22:53,000
We were the project lead,

575
00:22:53,000 --> 00:22:55,000
so there were very few

576
00:22:55,000 --> 00:22:57,000
who decided

577
00:22:57,000 --> 00:22:59,000
to make a roadmap,

578
00:22:59,000 --> 00:23:01,000
and then you had

579
00:23:01,000 --> 00:23:03,000
some parties,

580
00:23:03,000 --> 00:23:05,000
big parties,

581
00:23:05,000 --> 00:23:07,000
who wanted to have a feature,

582
00:23:07,000 --> 00:23:09,000
or something that wasn't

583
00:23:09,000 --> 00:23:11,000
on the list,

584
00:23:11,000 --> 00:23:13,000
or something they saw

585
00:23:13,000 --> 00:23:15,000
on the list,

586
00:23:15,000 --> 00:23:17,000
and they paid for it,

587
00:23:17,000 --> 00:23:19,000
so that they moved

588
00:23:19,000 --> 00:23:21,000
a bit higher,

589
00:23:21,000 --> 00:23:23,000
or something was added,

590
00:23:23,000 --> 00:23:25,000
and so on.

591
00:23:25,000 --> 00:23:27,000
Now, later on,

592
00:23:27,000 --> 00:23:29,000
it's very product-driven.

593
00:23:29,000 --> 00:23:31,000
You can see

594
00:23:31,000 --> 00:23:33,000
what needs we have,

595
00:23:33,000 --> 00:23:35,000
because we are so much bigger,

596
00:23:35,000 --> 00:23:37,000
and we collect all the

597
00:23:37,000 --> 00:23:39,000
demands of the big parties,

598
00:23:39,000 --> 00:23:41,000
it's a bit filtered,

599
00:23:41,000 --> 00:23:43,000
and then the projects

600
00:23:43,000 --> 00:23:45,000
move towards

601
00:23:45,000 --> 00:23:47,000
the satisfaction

602
00:23:47,000 --> 00:23:49,000
of the needs.

603
00:23:49,000 --> 00:23:51,000
If I understand correctly,

604
00:23:51,000 --> 00:23:53,000
you were at the

605
00:23:53,000 --> 00:23:55,000
product, which was

606
00:23:55,000 --> 00:23:57,000
JBoss Enterprise,

607
00:23:57,000 --> 00:23:59,000
and then you have

608
00:23:59,000 --> 00:24:01,000
the JBoss Community,

609
00:24:01,000 --> 00:24:03,000
what is the metaphor?

610
00:24:03,000 --> 00:24:05,000
Did the JBoss Enterprise

611
00:24:05,000 --> 00:24:07,000
become a community,

612
00:24:07,000 --> 00:24:09,000
or did the JBoss Community

613
00:24:09,000 --> 00:24:11,000
grow and then become an enterprise?

614
00:24:11,000 --> 00:24:13,000
A long time ago,

615
00:24:13,000 --> 00:24:15,000
the enterprise,

616
00:24:15,000 --> 00:24:17,000
it didn't start

617
00:24:17,000 --> 00:24:19,000
after a couple of years,

618
00:24:19,000 --> 00:24:21,000
when Red Hat bought it.

619
00:24:21,000 --> 00:24:23,000
It was a community, JBoss,

620
00:24:23,000 --> 00:24:25,000
nicely tested, packed,

621
00:24:25,000 --> 00:24:27,000
downloaded,

622
00:24:27,000 --> 00:24:29,000
supported,

623
00:24:29,000 --> 00:24:31,000
you can pay for support,

624
00:24:31,000 --> 00:24:33,000
but it was all done

625
00:24:33,000 --> 00:24:35,000
on that community,

626
00:24:35,000 --> 00:24:37,000
there was only one version.

627
00:24:37,000 --> 00:24:39,000
Then came

628
00:24:39,000 --> 00:24:41,000
EAP,

629
00:24:41,000 --> 00:24:43,000
EAP is nothing else

630
00:24:43,000 --> 00:24:45,000
than a community,

631
00:24:45,000 --> 00:24:47,000
but everything,

632
00:24:47,000 --> 00:24:49,000
all the jars, all the packages

633
00:24:49,000 --> 00:24:51,000
are tested, verified,

634
00:24:51,000 --> 00:24:53,000
marked,

635
00:24:53,000 --> 00:24:55,000
signed,

636
00:24:55,000 --> 00:24:57,000
and that's it.

637
00:24:57,000 --> 00:24:59,000
Is it easier to sell the enterprise?

638
00:25:00,000 --> 00:25:04,000
It's an enterprise standard that requires it.

639
00:25:04,000 --> 00:25:07,000
I don't know if it's a standard, maybe...

640
00:25:07,000 --> 00:25:12,000
You know, this is a provocative question.

641
00:25:12,000 --> 00:25:20,000
Java, let's start with version 1.0, and maybe 1.2, which was a big difference.

642
00:25:20,000 --> 00:25:23,000
Look at how we are all here.

643
00:25:23,000 --> 00:25:26,000
This has become an enterprise language.

644
00:25:26,000 --> 00:25:33,000
In enterprise software, Java has become a de facto language.

645
00:25:33,000 --> 00:25:40,000
What is it that makes this language, Java, dominate?

646
00:25:40,000 --> 00:25:43,000
Why would Java dominate?

647
00:25:43,000 --> 00:25:45,000
I don't know.

648
00:25:45,000 --> 00:25:49,000
I've been programming since I was a kid.

649
00:25:49,000 --> 00:25:52,000
When I was a kid, I used to do some serious stuff.

650
00:25:52,000 --> 00:25:56,000
I'm talking about C++, when I was a kid.

651
00:25:56,000 --> 00:26:00,000
I used to work only with Java.

652
00:26:00,000 --> 00:26:05,000
But now I see that when I work with Java,

653
00:26:05,000 --> 00:26:09,000
I'm not really impressed by the fact that

654
00:26:09,000 --> 00:26:13,000
when I needed a book for something,

655
00:26:13,000 --> 00:26:16,000
it was already there.

656
00:26:16,000 --> 00:26:19,000
When you remember, it was already there,

657
00:26:19,000 --> 00:26:22,000
so you could buy something from it.

658
00:26:22,000 --> 00:26:25,000
But in very rare cases...

659
00:26:25,000 --> 00:26:28,000
At the beginning, when I was still working as a soloist,

660
00:26:28,000 --> 00:26:31,000
we bought a few things from smaller bookstores.

661
00:26:31,000 --> 00:26:35,000
Later on, when I'm still playing,

662
00:26:35,000 --> 00:26:38,000
it's not a book that wouldn't be open source,

663
00:26:38,000 --> 00:26:40,000
that I wouldn't be able to get.

664
00:26:40,000 --> 00:26:43,000
That's why it was fascinating to me.

665
00:26:43,000 --> 00:26:46,000
In Gojo, there's also...

666
00:26:46,000 --> 00:26:49,000
I don't know where else,

667
00:26:49,000 --> 00:26:52,000
but in Gojo, there's also a store.

668
00:26:52,000 --> 00:26:55,000
I don't know if I've seen it,

669
00:26:55,000 --> 00:26:58,000
but I haven't really worked there.

670
00:26:58,000 --> 00:27:01,000
But I don't think there's such a quantity,

671
00:27:01,000 --> 00:27:04,000
and such a quality.

672
00:27:04,000 --> 00:27:07,000
If you think about it, you could get Jboss for $100,

673
00:27:07,000 --> 00:27:10,000
and it would be really good.

674
00:27:10,000 --> 00:27:13,000
It was really good,

675
00:27:13,000 --> 00:27:16,000
and there were a lot of other bookstores.

676
00:27:16,000 --> 00:27:19,000
There were a lot of big ones,

677
00:27:19,000 --> 00:27:22,000
Kafka, Hadoop, I don't know what else.

678
00:27:22,000 --> 00:27:25,000
It's crazy what quality you could get for $100.

679
00:27:25,000 --> 00:27:28,000
That's it, I think.

680
00:27:28,000 --> 00:27:31,000
That's it for me.

681
00:27:31,000 --> 00:27:34,000
Andraž wanted to say,

682
00:27:34,000 --> 00:27:37,000
that he wrote Java 1.2 in the last episode.

683
00:27:37,000 --> 00:27:40,000
I'm sorry.

684
00:27:40,000 --> 00:27:43,000
When I started with Java,

685
00:27:43,000 --> 00:27:46,000
it was 1.0 at the time.

686
00:27:46,000 --> 00:27:49,000
And then there was the jump to 1.2,

687
00:27:49,000 --> 00:27:52,000
where everything was different.

688
00:27:52,000 --> 00:27:55,000
1.1 was a disaster.

689
00:27:55,000 --> 00:27:58,000
1.2 was the first one,

690
00:27:58,000 --> 00:28:01,000
and 1.4 was without...

691
00:28:01,000 --> 00:28:04,000
1.4 got generics.

692
00:28:04,000 --> 00:28:07,000
No, my generics were 1.5.

693
00:28:07,000 --> 00:28:10,000
1.5.

694
00:28:10,000 --> 00:28:13,000
Yes, 1.5 were the generics.

695
00:28:13,000 --> 00:28:16,000
But 1.4 was already...

696
00:28:16,000 --> 00:28:19,000
Things were already working well.

697
00:28:19,000 --> 00:28:22,000
Before, it was a bit difficult to keep up.

698
00:28:22,000 --> 00:28:25,000
But with 1.4...

699
00:28:25,000 --> 00:28:28,000
We went from 1.4 to 1.4 for a long time,

700
00:28:28,000 --> 00:28:31,000
and with 1.5, generics helped a lot.

701
00:28:31,000 --> 00:28:34,000
Is it true that most of the world

702
00:28:34,000 --> 00:28:37,000
is running on Java 8?

703
00:28:37,000 --> 00:28:40,000
On Java 8?

704
00:28:40,000 --> 00:28:43,000
Yes.

705
00:28:43,000 --> 00:28:46,000
It's been a while.

706
00:28:46,000 --> 00:28:49,000
I saw it for the first time,

707
00:28:49,000 --> 00:28:52,000
when I was writing our projects,

708
00:28:52,000 --> 00:28:55,000
on Java 8,

709
00:28:55,000 --> 00:28:58,000
because you promised to support it,

710
00:28:58,000 --> 00:29:01,000
but you couldn't go any further.

711
00:29:01,000 --> 00:29:04,000
Thank you, Dio.

712
00:29:04,000 --> 00:29:07,000
I think that on 1.1, it was a quick jump.

713
00:29:07,000 --> 00:29:10,000
On 1.1, you could go,

714
00:29:10,000 --> 00:29:13,000
but you didn't ruin much.

715
00:29:13,000 --> 00:29:16,000
I think that on 1.1,

716
00:29:16,000 --> 00:29:19,000
there were modules,

717
00:29:19,000 --> 00:29:22,000
but not yet.

718
00:29:22,000 --> 00:29:25,000
As someone who has been working

719
00:29:25,000 --> 00:29:28,000
on Java for a long time,

720
00:29:28,000 --> 00:29:31,000
do you think that Java is moving fast?

721
00:29:31,000 --> 00:29:34,000
Do you think it could develop faster?

722
00:29:34,000 --> 00:29:37,000
Do you think it's slowing down?

723
00:29:37,000 --> 00:29:40,000
How do you see it?

724
00:29:40,000 --> 00:29:43,000
Can you comment on how the language

725
00:29:43,000 --> 00:29:46,000
changes and develops over time?

726
00:29:46,000 --> 00:29:49,000
OK.

727
00:29:49,000 --> 00:29:52,000
1.4, 1.5,

728
00:29:52,000 --> 00:29:55,000
I don't remember how fast,

729
00:29:55,000 --> 00:29:58,000
but I think that 1.5 was quite slow.

730
00:29:58,000 --> 00:30:01,000
For a long time,

731
00:30:01,000 --> 00:30:04,000
there was nothing smart.

732
00:30:04,000 --> 00:30:07,000
A lot of languages appeared there.

733
00:30:07,000 --> 00:30:10,000
They were all famous,

734
00:30:10,000 --> 00:30:13,000
because they had a lot of books.

735
00:30:13,000 --> 00:30:16,000
I remember Google's head of books,

736
00:30:16,000 --> 00:30:19,000
I don't know what they were called,

737
00:30:19,000 --> 00:30:22,000
but there were a lot of books,

738
00:30:22,000 --> 00:30:25,000
and streams,

739
00:30:25,000 --> 00:30:28,000
because you could see it in other languages.

740
00:30:28,000 --> 00:30:31,000
But not here.

741
00:30:31,000 --> 00:30:34,000
Then new languages appeared,

742
00:30:34,000 --> 00:30:37,000
like CEL, Kotlin, Pascal,

743
00:30:37,000 --> 00:30:40,000
and it was nice that the price changed,

744
00:30:40,000 --> 00:30:43,000
because we made a mistake.

745
00:30:43,000 --> 00:30:46,000
Then Java 8 appeared,

746
00:30:46,000 --> 00:30:49,000
but I didn't make a lot of mistakes,

747
00:30:49,000 --> 00:30:52,000
because I added it to the stream,

748
00:30:52,000 --> 00:30:55,000
and I made the function for the lamp.

749
00:30:55,000 --> 00:30:58,000
I didn't make a lot of mistakes.

750
00:30:58,000 --> 00:31:01,000
Then they made a commitment

751
00:31:01,000 --> 00:31:04,000
to make the versions faster,

752
00:31:04,000 --> 00:31:07,000
like 9, 10, 11,

753
00:31:07,000 --> 00:31:10,000
and it was fine,

754
00:31:10,000 --> 00:31:13,000
but there were a lot of mistakes.

755
00:31:13,000 --> 00:31:16,000
With Java 8,

756
00:31:16,000 --> 00:31:19,000
I didn't make a lot of mistakes.

757
00:31:19,000 --> 00:31:22,000
Before, I was like,

758
00:31:22,000 --> 00:31:25,000
I have to work on my collection,

759
00:31:25,000 --> 00:31:28,000
I don't know,

760
00:31:28,000 --> 00:31:31,000
I don't have to call those functions.

761
00:31:31,000 --> 00:31:34,000
I think the recommended version

762
00:31:34,000 --> 00:31:37,000
for a new project is 17.

763
00:31:37,000 --> 00:31:40,000
Yes, I have 17.

764
00:31:40,000 --> 00:31:43,000
I've been playing with 19 for a long time,

765
00:31:43,000 --> 00:31:46,000
so I know Project LUM,

766
00:31:46,000 --> 00:31:49,000
to see how it works,

767
00:31:49,000 --> 00:31:52,000
but yes, 17.

768
00:31:52,000 --> 00:31:55,000
LUM will have a new trading model,

769
00:31:55,000 --> 00:31:58,000
can you tell us more about it?

770
00:31:58,000 --> 00:32:01,000
Yes, when you look at the whole problem,

771
00:32:01,000 --> 00:32:04,000
because of trading,

772
00:32:04,000 --> 00:32:07,000
like it is now,

773
00:32:07,000 --> 00:32:10,000
the price of one thread

774
00:32:10,000 --> 00:32:13,000
is high.

775
00:32:13,000 --> 00:32:16,000
If you have an application

776
00:32:16,000 --> 00:32:19,000
that needs a lot of...

777
00:32:19,000 --> 00:32:22,000
I don't know,

778
00:32:22,000 --> 00:32:25,000
if you want to have

779
00:32:25,000 --> 00:32:28,000
one thread for every request,

780
00:32:28,000 --> 00:32:31,000
it won't work.

781
00:32:31,000 --> 00:32:34,000
Then there's React,

782
00:32:34,000 --> 00:32:37,000
which is a connection pool,

783
00:32:37,000 --> 00:32:40,000
and you can request your tasks

784
00:32:40,000 --> 00:32:43,000
as soon as possible,

785
00:32:43,000 --> 00:32:46,000
so they don't take too long,

786
00:32:46,000 --> 00:32:49,000
but you can share

787
00:32:49,000 --> 00:32:52,000
a lot of short tasks

788
00:32:52,000 --> 00:32:55,000
with a small number of threads.

789
00:32:55,000 --> 00:32:58,000
But now the threads are different,

790
00:32:58,000 --> 00:33:01,000
they were made natively,

791
00:33:01,000 --> 00:33:04,000
and now they will be...

792
00:33:04,000 --> 00:33:07,000
I didn't show them all,

793
00:33:07,000 --> 00:33:10,000
I hope I didn't say too much.

794
00:33:10,000 --> 00:33:13,000
It will be a bit confusing,

795
00:33:13,000 --> 00:33:16,000
but they will be natively made,

796
00:33:16,000 --> 00:33:19,000
and that's how the virtual threads

797
00:33:19,000 --> 00:33:22,000
will be made.

798
00:33:22,000 --> 00:33:25,000
What are they called? Green threads?

799
00:33:25,000 --> 00:33:28,000
Yes, virtual threads.

800
00:33:28,000 --> 00:33:31,000
So they will help you with execution

801
00:33:31,000 --> 00:33:34,000
and the last schedule?

802
00:33:34,000 --> 00:33:37,000
Yes, something like that.

803
00:33:37,000 --> 00:33:40,000
You're just nodding.

804
00:33:40,000 --> 00:33:43,000
Some things just happened.

805
00:33:43,000 --> 00:33:46,000
You didn't fall asleep,

806
00:33:46,000 --> 00:33:49,000
you just moved on.

807
00:33:49,000 --> 00:33:52,000
Let's break it down a bit,

808
00:33:52,000 --> 00:33:55,000
and move on to other things.

809
00:33:55,000 --> 00:33:58,000
For example, people who do

810
00:33:58,000 --> 00:34:01,000
high-frequency threading,

811
00:34:01,000 --> 00:34:04,000
or ultra-performance threads,

812
00:34:04,000 --> 00:34:07,000
and they talk about

813
00:34:07,000 --> 00:34:10,000
C++, C...

814
00:34:10,000 --> 00:34:13,000
It's not about scale.

815
00:34:13,000 --> 00:34:16,000
Aka!

816
00:34:16,000 --> 00:34:19,000
I just wanted to hear

817
00:34:19,000 --> 00:34:22,000
that Java, in your opinion,

818
00:34:22,000 --> 00:34:25,000
is a real player for

819
00:34:25,000 --> 00:34:28,000
high-performance threads,

820
00:34:28,000 --> 00:34:31,000
for latency-critical threads,

821
00:34:31,000 --> 00:34:34,000
and everything moves in that direction,

822
00:34:34,000 --> 00:34:37,000
there's always more optimization

823
00:34:37,000 --> 00:34:40,000
going in that direction,

824
00:34:40,000 --> 00:34:43,000
and it's a language you can use

825
00:34:43,000 --> 00:34:46,000
for high-performance threads,

826
00:34:46,000 --> 00:34:49,000
and it will help you, I know,

827
00:34:49,000 --> 00:34:52,000
to work on modern applications.

828
00:34:52,000 --> 00:34:55,000
Do you see the problem inside,

829
00:34:55,000 --> 00:34:58,000
or would you say,

830
00:34:58,000 --> 00:35:01,000
sorry, garbage collection will

831
00:35:01,000 --> 00:35:04,000
take care of the problem?

832
00:35:04,000 --> 00:35:07,000
Interesting question.

833
00:35:07,000 --> 00:35:10,000
I worked on a project,

834
00:35:10,000 --> 00:35:13,000
instead of Red Hat,

835
00:35:13,000 --> 00:35:16,000
and the problem was

836
00:35:16,000 --> 00:35:19,000
that it had to be very fast,

837
00:35:19,000 --> 00:35:22,000
and it was possible.

838
00:35:22,000 --> 00:35:25,000
In our case, it wasn't

839
00:35:25,000 --> 00:35:28,000
that critical,

840
00:35:28,000 --> 00:35:31,000
it was just important

841
00:35:31,000 --> 00:35:34,000
that it was fast.

842
00:35:34,000 --> 00:35:37,000
As I said, if it's fast,

843
00:35:37,000 --> 00:35:40,000
it's very important,

844
00:35:40,000 --> 00:35:43,000
but it's also possible

845
00:35:43,000 --> 00:35:46,000
to use different types of JVMs.

846
00:35:46,000 --> 00:35:49,000
You can use different types of JVMs,

847
00:35:49,000 --> 00:35:52,000
I haven't thought about that,

848
00:35:52,000 --> 00:35:55,000
but you can use IBM JVMs,

849
00:35:55,000 --> 00:35:58,000
or Oracle,

850
00:35:58,000 --> 00:36:01,000
or academic JVMs,

851
00:36:01,000 --> 00:36:04,000
which are all based on OpenJDK,

852
00:36:04,000 --> 00:36:07,000
but they're all written,

853
00:36:07,000 --> 00:36:10,000
so you don't know

854
00:36:10,000 --> 00:36:13,000
how to use them.

855
00:36:13,000 --> 00:36:16,000
There are different types of garbage collectors,

856
00:36:16,000 --> 00:36:19,000
you can choose one,

857
00:36:19,000 --> 00:36:22,000
and you can use the whole garbage collection

858
00:36:22,000 --> 00:36:25,000
algorithm or mechanism.

859
00:36:25,000 --> 00:36:28,000
What we did,

860
00:36:28,000 --> 00:36:31,000
there's an interesting paper,

861
00:36:31,000 --> 00:36:34,000
Disruptor,

862
00:36:34,000 --> 00:36:37,000
which mentions

863
00:36:37,000 --> 00:36:40,000
a few trends,

864
00:36:40,000 --> 00:36:43,000
it's very fast,

865
00:36:43,000 --> 00:36:46,000
and we added there,

866
00:36:46,000 --> 00:36:49,000
to expand the problem,

867
00:36:49,000 --> 00:36:52,000
there was Kafka,

868
00:36:52,000 --> 00:36:55,000
and with Kafka you can scale

869
00:36:55,000 --> 00:36:58,000
horizontally as you want.

870
00:36:58,000 --> 00:37:01,000
If we needed more,

871
00:37:01,000 --> 00:37:04,000
we would have more Kafka instances,

872
00:37:04,000 --> 00:37:07,000
and more Kafka brokers,

873
00:37:07,000 --> 00:37:10,000
and we would be able to handle

874
00:37:10,000 --> 00:37:13,000
a crazy amount of messages.

875
00:37:13,000 --> 00:37:16,000
You're talking about millions of messages

876
00:37:16,000 --> 00:37:19,000
in a very short time.

877
00:37:19,000 --> 00:37:22,000
Do you think that Java

878
00:37:22,000 --> 00:37:25,000
is a good language

879
00:37:25,000 --> 00:37:28,000
for any problem?

880
00:37:28,000 --> 00:37:31,000
If you go to a special W,

881
00:37:31,000 --> 00:37:34,000
I think it's good.

882
00:37:34,000 --> 00:37:37,000
If you're an experienced developer,

883
00:37:37,000 --> 00:37:40,000
you don't have to do anything,

884
00:37:40,000 --> 00:37:43,000
because it's a garbage collector.

885
00:37:43,000 --> 00:37:46,000
If you have a memory of your own,

886
00:37:46,000 --> 00:37:49,000
it's probably better,

887
00:37:49,000 --> 00:37:52,000
because you have something for women,

888
00:37:52,000 --> 00:37:55,000
which you don't have any influence on.

889
00:37:55,000 --> 00:37:58,000
You can make it very short,

890
00:37:58,000 --> 00:38:01,000
and you don't need a lot of memory.

891
00:38:01,000 --> 00:38:04,000
If we're talking about cloud,

892
00:38:04,000 --> 00:38:07,000
we might have a bigger corpus,

893
00:38:07,000 --> 00:38:10,000
and maybe the connection is

894
00:38:10,000 --> 00:38:13,000
the part we see on GraalVM,

895
00:38:13,000 --> 00:38:16,000
and the ahead-of-time compilation.

896
00:38:16,000 --> 00:38:19,000
When we talk about cloud,

897
00:38:19,000 --> 00:38:22,000
we're talking about different architectures,

898
00:38:22,000 --> 00:38:25,000
where we talk about small services

899
00:38:25,000 --> 00:38:28,000
that process data,

900
00:38:28,000 --> 00:38:31,000
and when you don't need them,

901
00:38:31,000 --> 00:38:34,000
you kill them and downscale them.

902
00:38:34,000 --> 00:38:37,000
Cloud, especially for software,

903
00:38:37,000 --> 00:38:40,000
has different requirements

904
00:38:40,000 --> 00:38:43,000
than what we talked about in JBoss.

905
00:38:43,000 --> 00:38:46,000
I wonder if you can see

906
00:38:46,000 --> 00:38:49,000
what the requirements of the cloud are,

907
00:38:49,000 --> 00:38:52,000
and how JVM and Epic

908
00:38:52,000 --> 00:38:55,000
work together.

909
00:38:55,000 --> 00:38:58,000
I was here in Del,

910
00:38:58,000 --> 00:39:01,000
when OpenShift came out,

911
00:39:01,000 --> 00:39:04,000
we already had Red Hat,

912
00:39:04,000 --> 00:39:07,000
and then we bought a farm,

913
00:39:07,000 --> 00:39:10,000
where we were working

914
00:39:10,000 --> 00:39:13,000
like some containers,

915
00:39:13,000 --> 00:39:16,000
and it quickly turned out

916
00:39:16,000 --> 00:39:19,000
that there were no containers,

917
00:39:19,000 --> 00:39:22,000
but there were some processes,

918
00:39:22,000 --> 00:39:25,000
and they were running there.

919
00:39:25,000 --> 00:39:28,000
Then OpenShift 1 came out,

920
00:39:28,000 --> 00:39:31,000
I think it was too fast,

921
00:39:31,000 --> 00:39:34,000
and then OpenShift 2,

922
00:39:34,000 --> 00:39:37,000
which was already on containers.

923
00:39:37,000 --> 00:39:40,000
We didn't have any other smart software

924
00:39:40,000 --> 00:39:43,000
to offer,

925
00:39:43,000 --> 00:39:46,000
so we offered JBoss in the cloud,

926
00:39:46,000 --> 00:39:49,000
and then Infinispam,

927
00:39:49,000 --> 00:39:52,000
and other projects like Drool.

928
00:39:52,000 --> 00:39:55,000
It quickly turned out

929
00:39:55,000 --> 00:39:58,000
that this is not good.

930
00:39:58,000 --> 00:40:01,000
People already said

931
00:40:01,000 --> 00:40:04,000
that they will buy OpenShift 2

932
00:40:04,000 --> 00:40:07,000
and run JVM applications on them

933
00:40:07,000 --> 00:40:10,000
in JBoss or in EAP.

934
00:40:10,000 --> 00:40:13,000
Before they wanted Cluster,

935
00:40:13,000 --> 00:40:16,000
and we could run JVM for everyone,

936
00:40:16,000 --> 00:40:19,000
and in JBoss,

937
00:40:19,000 --> 00:40:22,000
and it was a resource

938
00:40:22,000 --> 00:40:25,000
like eating candy.

939
00:40:25,000 --> 00:40:28,000
The color of the JVM application

940
00:40:28,000 --> 00:40:31,000
was quite nicely pasted.

941
00:40:34,000 --> 00:40:37,000
Today's OpenShift 2

942
00:40:37,000 --> 00:40:40,000
was more like Kubernetes,

943
00:40:40,000 --> 00:40:43,000
a very poor man's Kubernetes.

944
00:40:43,000 --> 00:40:46,000
When Google came to us,

945
00:40:46,000 --> 00:40:49,000
I still didn't know about Kubernetes,

946
00:40:49,000 --> 00:40:52,000
but the day before,

947
00:40:52,000 --> 00:40:55,000
I learned about it.

948
00:40:55,000 --> 00:40:58,000
We were just on the other side,

949
00:40:58,000 --> 00:41:01,000
and then Kubernetes.

950
00:41:01,000 --> 00:41:04,000
Everyone knew

951
00:41:04,000 --> 00:41:07,000
that you couldn't do anything smart

952
00:41:07,000 --> 00:41:10,000
with JBoss and OpenShift 2.

953
00:41:10,000 --> 00:41:13,000
You couldn't make a lot of changes.

954
00:41:13,000 --> 00:41:16,000
JBoss wasn't an example,

955
00:41:16,000 --> 00:41:19,000
because it was a resource

956
00:41:19,000 --> 00:41:22,000
that could be used for everyone.

957
00:41:22,000 --> 00:41:25,000
It was JVM,

958
00:41:25,000 --> 00:41:28,000
so everyone knew about it.

959
00:41:28,000 --> 00:41:31,000
Everyone quickly started using it.

960
00:41:31,000 --> 00:41:34,000
Microapps, SpringBoot

961
00:41:34,000 --> 00:41:37,000
were a big hit at the time.

962
00:41:37,000 --> 00:41:40,000
SpringBoot wasn't exactly what you wanted.

963
00:41:40,000 --> 00:41:43,000
It was a bit of a nuisance

964
00:41:43,000 --> 00:41:46,000
that you only needed it at the time,

965
00:41:46,000 --> 00:41:49,000
that you didn't want to crash

966
00:41:49,000 --> 00:41:52,000
an application server.

967
00:41:52,000 --> 00:41:55,000
You could crash JBoss,

968
00:41:55,000 --> 00:41:58,000
if you knew about it,

969
00:41:58,000 --> 00:42:01,000
but you were on the other side

970
00:42:01,000 --> 00:42:04,000
and it didn't work.

971
00:42:04,000 --> 00:42:07,000
SpringBoot was designed to be minimal,

972
00:42:07,000 --> 00:42:10,000
but it was always too big.

973
00:42:10,000 --> 00:42:13,000
Then there was GraalVM.

974
00:42:13,000 --> 00:42:16,000
GraalVM was beautiful,

975
00:42:16,000 --> 00:42:19,000
you could compile it on the net,

976
00:42:19,000 --> 00:42:22,000
but everything didn't go as planned.

977
00:42:22,000 --> 00:42:25,000
You couldn't compile a lot of things,

978
00:42:25,000 --> 00:42:28,000
because there were substitutes

979
00:42:28,000 --> 00:42:31,000
and you had to ignore things.

980
00:42:31,000 --> 00:42:34,000
But you could do a lot

981
00:42:34,000 --> 00:42:37,000
if you didn't do it alone,

982
00:42:37,000 --> 00:42:40,000
because you didn't know

983
00:42:40,000 --> 00:42:43,000
what you could do.

984
00:42:43,000 --> 00:42:46,000
Then there was the need for Quarkus.

985
00:42:46,000 --> 00:42:49,000
Quarkus has more...

986
00:42:49,000 --> 00:42:52,000
Let's go back to Quarkus.

987
00:42:52,000 --> 00:42:55,000
Let's go back to Quarkus.

988
00:43:03,000 --> 00:43:06,000
It's great that we have a deep debate,

989
00:43:06,000 --> 00:43:09,000
that's why we're here,

990
00:43:09,000 --> 00:43:12,000
but I still have to say a few words

991
00:43:12,000 --> 00:43:15,000
for those who don't work,

992
00:43:15,000 --> 00:43:18,000
because we talk about God every day.

993
00:43:18,000 --> 00:43:21,000
GraalVM...

994
00:43:22,000 --> 00:43:25,000
GraalVM is a new version

995
00:43:25,000 --> 00:43:28,000
of Virtual Machine,

996
00:43:28,000 --> 00:43:31,000
which doesn't use Java binary anymore,

997
00:43:31,000 --> 00:43:34,000
but it uses a native binary

998
00:43:34,000 --> 00:43:37,000
that GraalVM uses.

999
00:43:39,000 --> 00:43:42,000
Java is a classic

1000
00:43:42,000 --> 00:43:45,000
chest-in-time compilation,

1001
00:43:45,000 --> 00:43:48,000
versus Graal, which allows

1002
00:43:48,000 --> 00:43:51,000
you to do a lot of things.

1003
00:43:51,000 --> 00:43:54,000
Can you explain the difference?

1004
00:43:54,000 --> 00:43:57,000
You're asking me first.

1005
00:43:57,000 --> 00:44:00,000
If I imagine GraalVM,

1006
00:44:00,000 --> 00:44:03,000
and I don't watch it anymore,

1007
00:44:03,000 --> 00:44:06,000
because I built it a bit,

1008
00:44:06,000 --> 00:44:09,000
I'm a bit older,

1009
00:44:09,000 --> 00:44:12,000
and I'm not much younger

1010
00:44:12,000 --> 00:44:15,000
than I could be.

1011
00:44:15,000 --> 00:44:18,000
It's a nice app,

1012
00:44:18,000 --> 00:44:21,000
and if you work with Graal

1013
00:44:21,000 --> 00:44:24,000
and Unicompiler,

1014
00:44:24,000 --> 00:44:27,000
you can do it in the class

1015
00:44:27,000 --> 00:44:30,000
and in the native.

1016
00:44:30,000 --> 00:44:33,000
When you get the binary in the native,

1017
00:44:33,000 --> 00:44:36,000
you get your application packed,

1018
00:44:36,000 --> 00:44:39,000
plus GraalVM hidden inside.

1019
00:44:39,000 --> 00:44:42,000
The point of GraalVM

1020
00:44:42,000 --> 00:44:45,000
is that you can use it

1021
00:44:45,000 --> 00:44:48,000
as a regular virtual machine,

1022
00:44:48,000 --> 00:44:51,000
but you can also use it

1023
00:44:51,000 --> 00:44:54,000
to build a native binary.

1024
00:44:54,000 --> 00:44:57,000
That's my logical question.

1025
00:44:57,000 --> 00:45:00,000
When you write in Java,

1026
00:45:00,000 --> 00:45:03,000
you can put it in GraalVM.

1027
00:45:03,000 --> 00:45:06,000
You can compile it from Java C,

1028
00:45:06,000 --> 00:45:09,000
get the classes,

1029
00:45:09,000 --> 00:45:12,000
call the native image from GraalVM,

1030
00:45:12,000 --> 00:45:15,000
and it will show up in the binary.

1031
00:45:15,000 --> 00:45:18,000
The binary has a VM inside,

1032
00:45:18,000 --> 00:45:21,000
and all the code you have,

1033
00:45:21,000 --> 00:45:24,000
and that's the binary.

1034
00:45:24,000 --> 00:45:27,000
It's because the compilation

1035
00:45:27,000 --> 00:45:30,000
has to know the path to the frame,

1036
00:45:30,000 --> 00:45:33,000
and you have to give it additional information

1037
00:45:33,000 --> 00:45:36,000
so the native image can show up.

1038
00:45:36,000 --> 00:45:39,000
The point of these images is

1039
00:45:39,000 --> 00:45:42,000
that they have a smaller memory footprint,

1040
00:45:42,000 --> 00:45:45,000
so they are smaller,

1041
00:45:45,000 --> 00:45:48,000
and they move faster.

1042
00:45:48,000 --> 00:45:51,000
You don't have a reflection, for example.

1043
00:45:51,000 --> 00:45:54,000
But you have to do the compiling,

1044
00:45:54,000 --> 00:45:57,000
so you probably have a smaller architecture.

1045
00:45:57,000 --> 00:46:00,000
You have to compile it.

1046
00:46:00,000 --> 00:46:03,000
If you build for different architectures,

1047
00:46:03,000 --> 00:46:06,000
you have docker images

1048
00:46:06,000 --> 00:46:09,000
for building specific platforms.

1049
00:46:09,000 --> 00:46:12,000
I think you can't build on Mac.

1050
00:46:12,000 --> 00:46:15,000
There are old Mac images.

1051
00:46:15,000 --> 00:46:18,000
I don't know if you asked me.

1052
00:46:18,000 --> 00:46:21,000
I know I can't build an image for Linux,

1053
00:46:21,000 --> 00:46:24,000
or a binary for Linux,

1054
00:46:24,000 --> 00:46:27,000
because I put the binary

1055
00:46:27,000 --> 00:46:30,000
in my Linux image.

1056
00:46:30,000 --> 00:46:33,000
And the native you get

1057
00:46:33,000 --> 00:46:36,000
can be compiled in docker.

1058
00:46:36,000 --> 00:46:39,000
I can build a native for OS X,

1059
00:46:39,000 --> 00:46:42,000
and then I can build it directly

1060
00:46:42,000 --> 00:46:45,000
for my wife.

1061
00:46:45,000 --> 00:46:48,000
You can connect it,

1062
00:46:48,000 --> 00:46:51,000
but then you have to do it properly.

1063
00:46:51,000 --> 00:46:54,000
I didn't do that.

1064
00:46:54,000 --> 00:46:57,000
I built it for OS X,

1065
00:46:57,000 --> 00:47:00,000
and I said,

1066
00:47:00,000 --> 00:47:03,000
oops, that's it.

1067
00:47:03,000 --> 00:47:06,000
I think it supports

1068
00:47:06,000 --> 00:47:09,000
all different architectures.

1069
00:47:09,000 --> 00:47:12,000
Not only Java,

1070
00:47:12,000 --> 00:47:15,000
but you can use Ruby,

1071
00:47:15,000 --> 00:47:18,000
JavaScript, Python,

1072
00:47:18,000 --> 00:47:21,000
but you can also

1073
00:47:21,000 --> 00:47:24,000
compile different languages

1074
00:47:24,000 --> 00:47:27,000
for native images.

1075
00:47:27,000 --> 00:47:30,000
Oracle's idea with GraalVM

1076
00:47:30,000 --> 00:47:33,000
is that you can put GraalVM

1077
00:47:33,000 --> 00:47:36,000
inside Oracle,

1078
00:47:36,000 --> 00:47:39,000
and then you can put SQL inside Oracle.

1079
00:47:39,000 --> 00:47:42,000
It's a very interesting project

1080
00:47:42,000 --> 00:47:45,000
that Oracle is developing.

1081
00:47:45,000 --> 00:47:48,000
It's meant to unlock

1082
00:47:48,000 --> 00:47:51,000
Quarkus,

1083
00:47:51,000 --> 00:47:54,000
and to bring Java closer

1084
00:47:54,000 --> 00:47:57,000
to the cloud.

1085
00:47:57,000 --> 00:48:00,000
Before we go further,

1086
00:48:00,000 --> 00:48:03,000
how do you feel

1087
00:48:03,000 --> 00:48:06,000
about Red Hat,

1088
00:48:06,000 --> 00:48:09,000
the transformation of Red Hat?

1089
00:48:09,000 --> 00:48:12,000
Where was Red Hat

1090
00:48:12,000 --> 00:48:15,000
when you joined?

1091
00:48:15,000 --> 00:48:18,000
What did you do together?

1092
00:48:18,000 --> 00:48:21,000
How much has Red Hat changed?

1093
00:48:21,000 --> 00:48:24,000
I had the opportunity

1094
00:48:24,000 --> 00:48:27,000
to talk to someone from Red Hat,

1095
00:48:27,000 --> 00:48:30,000
who said that Red Hat fell asleep.

1096
00:48:30,000 --> 00:48:33,000
That Red Hat is a software company,

1097
00:48:33,000 --> 00:48:36,000
and that it's just a cloud train.

1098
00:48:36,000 --> 00:48:39,000
The only thing they have to show

1099
00:48:39,000 --> 00:48:42,000
is OpenShift.

1100
00:48:42,000 --> 00:48:45,000
All the other projects

1101
00:48:45,000 --> 00:48:48,000
like OpenStack and similar

1102
00:48:48,000 --> 00:48:51,000
are just clouds.

1103
00:48:51,000 --> 00:48:54,000
Red Hat has never been

1104
00:48:54,000 --> 00:48:57,000
a service.

1105
00:48:57,000 --> 00:49:00,000
How did you like it?

1106
00:49:00,000 --> 00:49:03,000
You have to make a sandwich.

1107
00:49:03,000 --> 00:49:06,000
First you answer that,

1108
00:49:06,000 --> 00:49:09,000
then we'll talk about Quarkus.

1109
00:49:09,000 --> 00:49:12,000
I don't have to answer you well.

1110
00:49:12,000 --> 00:49:15,000
Not that I don't want to,

1111
00:49:15,000 --> 00:49:18,000
or that I shouldn't,

1112
00:49:18,000 --> 00:49:21,000
but that's just my opinion.

1113
00:49:21,000 --> 00:49:24,000
Red Hat was very special for us.

1114
00:49:24,000 --> 00:49:27,000
We had a software middleware part,

1115
00:49:27,000 --> 00:49:30,000
a Linux part,

1116
00:49:30,000 --> 00:49:33,000
and an OpenShift cloud part.

1117
00:49:33,000 --> 00:49:36,000
We had a stand

1118
00:49:36,000 --> 00:49:39,000
of JBoss,

1119
00:49:39,000 --> 00:49:42,000
and then a middleware division.

1120
00:49:42,000 --> 00:49:45,000
There are some people

1121
00:49:45,000 --> 00:49:48,000
who mix it up,

1122
00:49:48,000 --> 00:49:51,000
and you can probably

1123
00:49:51,000 --> 00:49:54,000
answer that well.

1124
00:49:54,000 --> 00:49:57,000
I don't really practice with them

1125
00:49:57,000 --> 00:50:00,000
from Linux.

1126
00:50:00,000 --> 00:50:09,000
Benga, Stemi, Cloud, OpenShift, and a few others.

1127
00:50:09,000 --> 00:50:15,000
I'm not saying I'm not ready, but I know that when you hear it and see it,

1128
00:50:15,000 --> 00:50:20,000
there's a lot of commitment in OpenShift.

1129
00:50:20,000 --> 00:50:27,000
There's a lot of teams, and we had some really good people,

1130
00:50:27,000 --> 00:50:32,000
a few of them left, and Clayton went to Google.

1131
00:50:32,000 --> 00:50:37,000
But it's good to be able to replace someone like that.

1132
00:50:37,000 --> 00:50:42,000
It's good that they stayed there, and I bought them.

1133
00:50:42,000 --> 00:50:46,000
I know that we have one storage company, then another,

1134
00:50:46,000 --> 00:50:50,000
then a third, and you really need that.

1135
00:50:50,000 --> 00:50:54,000
If they were doing well, I wouldn't buy them.

1136
00:50:54,000 --> 00:50:59,000
We're all determined, and later, when IBM bought us,

1137
00:50:59,000 --> 00:51:04,000
it's interesting how determined they are,

1138
00:51:04,000 --> 00:51:07,000
because they have two determined cultures.

1139
00:51:07,000 --> 00:51:10,000
IBM has its own culture, Red Hat has its own.

1140
00:51:10,000 --> 00:51:15,000
I think that IBM is letting Red Hat's autonomy go,

1141
00:51:15,000 --> 00:51:18,000
that it's still Red Hat.

1142
00:51:18,000 --> 00:51:21,000
Yes, they are determined.

1143
00:51:21,000 --> 00:51:27,000
I know them, but I won't say where.

1144
00:51:27,000 --> 00:51:31,000
I think I know where the problem is.

1145
00:51:31,000 --> 00:51:38,000
But, as I said, they've let go of everything that's developing.

1146
00:51:38,000 --> 00:51:41,000
They're all getting together.

1147
00:51:41,000 --> 00:51:46,000
I see more of them going to IBM, to Kinio,

1148
00:51:46,000 --> 00:51:49,000
to Red Hat, and bringing people to Red Hat.

1149
00:51:49,000 --> 00:51:52,000
They're also going in a different direction,

1150
00:51:52,000 --> 00:51:55,000
but I'm paying less attention to that.

1151
00:51:55,000 --> 00:52:00,000
In fact, the consequences of IBM, WebSphere, and similar things in China...

1152
00:52:00,000 --> 00:52:03,000
Well, you can't really say that in China.

1153
00:52:03,000 --> 00:52:04,000
Yes.

1154
00:52:04,000 --> 00:52:07,000
It's just one more leg, and you're behind,

1155
00:52:07,000 --> 00:52:09,000
and with my support, you can...

1156
00:52:09,000 --> 00:52:11,000
But I see that with us, too.

1157
00:52:11,000 --> 00:52:13,000
For example, the e-app is very popular,

1158
00:52:13,000 --> 00:52:16,000
and every year we release a new version,

1159
00:52:16,000 --> 00:52:18,000
after a long time.

1160
00:52:18,000 --> 00:52:20,000
But you can't do that.

1161
00:52:20,000 --> 00:52:22,000
They don't have a WebSphere,

1162
00:52:22,000 --> 00:52:25,000
but they have a WebSphere Lite, and so on.

1163
00:52:25,000 --> 00:52:27,000
So we don't have to go to E-app,

1164
00:52:27,000 --> 00:52:29,000
and then go crazy.

1165
00:52:29,000 --> 00:52:32,000
You can't fall asleep.

1166
00:52:32,000 --> 00:52:35,000
I don't know.

1167
00:52:35,000 --> 00:52:38,000
It's interesting,

1168
00:52:38,000 --> 00:52:41,000
I don't know if I'm exaggerating,

1169
00:52:41,000 --> 00:52:44,000
but if it wasn't for Quarkus,

1170
00:52:44,000 --> 00:52:47,000
I could really say that we fell asleep.

1171
00:52:47,000 --> 00:52:50,000
Because Wildfly was there,

1172
00:52:50,000 --> 00:52:53,000
and they have good projects,

1173
00:52:53,000 --> 00:52:56,000
like Drools, which is at a very high level,

1174
00:52:56,000 --> 00:52:59,000
it has something similar,

1175
00:52:59,000 --> 00:53:02,000
and Hybrid, which is still developing,

1176
00:53:02,000 --> 00:53:05,000
they have such fine details,

1177
00:53:05,000 --> 00:53:08,000
and some other projects,

1178
00:53:08,000 --> 00:53:11,000
I don't know.

1179
00:53:11,000 --> 00:53:14,000
But that was it.

1180
00:53:14,000 --> 00:53:17,000
But when Quarkus came,

1181
00:53:17,000 --> 00:53:20,000
we fell asleep,

1182
00:53:20,000 --> 00:53:23,000
just like with application servers,

1183
00:53:23,000 --> 00:53:26,000
just like with game-changers.

1184
00:53:26,000 --> 00:53:29,000
SpringBoot is on the case,

1185
00:53:29,000 --> 00:53:32,000
but ours took a step forward,

1186
00:53:32,000 --> 00:53:35,000
and we have to deal with it later.

1187
00:53:35,000 --> 00:53:38,000
We don't want to...

1188
00:53:38,000 --> 00:53:41,000
No, no, no.

1189
00:53:41,000 --> 00:53:44,000
You can see it.

1190
00:53:44,000 --> 00:53:47,000
We said, why Oracle invested in it,

1191
00:53:47,000 --> 00:53:50,000
and why Quarkus,

1192
00:53:50,000 --> 00:53:53,000
these are the giants in the cloud,

1193
00:53:53,000 --> 00:53:56,000
all the technologies we will talk about.

1194
00:53:56,000 --> 00:53:59,000
But is the company still developing software?

1195
00:53:59,000 --> 00:54:02,000
Or is the company in a transition

1196
00:54:02,000 --> 00:54:05,000
to start developing as a server?

1197
00:54:05,000 --> 00:54:08,000
All the giants have focused

1198
00:54:08,000 --> 00:54:11,000
on being in the service.

1199
00:54:11,000 --> 00:54:14,000
But someone has to write software.

1200
00:54:14,000 --> 00:54:17,000
If you don't write it,

1201
00:54:17,000 --> 00:54:20,000
someone else will.

1202
00:54:20,000 --> 00:54:23,000
No, but here I understood

1203
00:54:23,000 --> 00:54:26,000
a sad story with RedHat,

1204
00:54:27,000 --> 00:54:30,000
that we wrote OpenStack

1205
00:54:30,000 --> 00:54:33,000
and similar applications,

1206
00:54:33,000 --> 00:54:36,000
but now it's used by others,

1207
00:54:36,000 --> 00:54:39,000
and someone else serves as a service.

1208
00:54:39,000 --> 00:54:42,000
We are just the ones

1209
00:54:42,000 --> 00:54:45,000
who write software and provide

1210
00:54:45,000 --> 00:54:48,000
professional support.

1211
00:54:48,000 --> 00:54:51,000
Nothing but excitement.

1212
00:54:51,000 --> 00:54:54,000
Yes, yes.

1213
00:54:55,000 --> 00:54:58,000
To go into services,

1214
00:54:58,000 --> 00:55:01,000
that's it, you don't just write software.

1215
00:55:01,000 --> 00:55:04,000
But the first service

1216
00:55:04,000 --> 00:55:07,000
that we would repeat

1217
00:55:07,000 --> 00:55:10,000
within our cloud,

1218
00:55:10,000 --> 00:55:13,000
is the Kafka service.

1219
00:55:13,000 --> 00:55:16,000
And it turned out to be very, very difficult.

1220
00:55:16,000 --> 00:55:19,000
Yes, and I think it answers

1221
00:55:19,000 --> 00:55:22,000
why it's not.

1222
00:55:22,000 --> 00:55:25,000
It's very difficult.

1223
00:55:25,000 --> 00:55:28,000
A couple of hundred people

1224
00:55:28,000 --> 00:55:31,000
turned to this to do it.

1225
00:55:31,000 --> 00:55:34,000
And they did it,

1226
00:55:34,000 --> 00:55:37,000
with such an optimistic plan.

1227
00:55:37,000 --> 00:55:40,000
And it turned out

1228
00:55:40,000 --> 00:55:43,000
that it's very difficult.

1229
00:55:43,000 --> 00:55:46,000
And because of that...

1230
00:55:46,000 --> 00:55:49,000
Are you talking about Streamzy?

1231
00:55:49,000 --> 00:55:52,000
Yes, Streamzy is used within it.

1232
00:55:52,000 --> 00:55:55,000
Streamzy was written,

1233
00:55:55,000 --> 00:55:58,000
and then another software was written,

1234
00:55:58,000 --> 00:56:01,000
to orchestrate it,

1235
00:56:01,000 --> 00:56:04,000
so that you can offer it

1236
00:56:04,000 --> 00:56:07,000
as a service in the cloud.

1237
00:56:07,000 --> 00:56:10,000
So if Andraž comes,

1238
00:56:10,000 --> 00:56:13,000
who has to install Kafka,

1239
00:56:13,000 --> 00:56:16,000
he can go to RedHat or IBM

1240
00:56:16,000 --> 00:56:19,000
IBM has its own cloud.

1241
00:56:19,000 --> 00:56:22,000
It still has it.

1242
00:56:22,000 --> 00:56:25,000
It's a cloud in Serbia.

1243
00:56:25,000 --> 00:56:28,000
No, no, no.

1244
00:56:28,000 --> 00:56:31,000
I know, I know.

1245
00:56:31,000 --> 00:56:34,000
I know, I know.

1246
00:56:34,000 --> 00:56:37,000
IBM used RedHat,

1247
00:56:37,000 --> 00:56:40,000
and RedHat replenished their cloud.

1248
00:56:40,000 --> 00:56:43,000
I think that IBM

1249
00:56:43,000 --> 00:56:46,000
is no longer a player in the cloud world.

1250
00:56:46,000 --> 00:56:49,000
That's a powerful statement.

1251
00:56:49,000 --> 00:56:52,000
But there are players.

1252
00:56:52,000 --> 00:56:55,000
Amazon, Google, Microsoft.

1253
00:56:55,000 --> 00:56:58,000
Alibaba.

1254
00:56:58,000 --> 00:57:01,000
Now we know who will sponsor this podcast.

1255
00:57:01,000 --> 00:57:04,000
Thank you, Andraž.

1256
00:57:04,000 --> 00:57:07,000
Thank you.

1257
00:57:07,000 --> 00:57:10,000
I wanted to tell the boss

1258
00:57:10,000 --> 00:57:13,000
that you're getting stickers.

1259
00:57:13,000 --> 00:57:16,000
Okay, look, IBM will be the cloud,

1260
00:57:16,000 --> 00:57:19,000
that's something else.

1261
00:57:19,000 --> 00:57:22,000
That's what I told you.

1262
00:57:22,000 --> 00:57:25,000
Messaging was one of the things

1263
00:57:25,000 --> 00:57:28,000
that was abolished,

1264
00:57:28,000 --> 00:57:31,000
and people who worked on it

1265
00:57:31,000 --> 00:57:34,000
were moved to RedHat or Streamzy.

1266
00:57:34,000 --> 00:57:37,000
I was there, I replaced them,

1267
00:57:37,000 --> 00:57:40,000
and we got 3-4 of them.

1268
00:57:40,000 --> 00:57:43,000
A few of them we already changed,

1269
00:57:43,000 --> 00:57:46,000
and we started talking about

1270
00:57:46,000 --> 00:57:49,000
synergy and integration,

1271
00:57:49,000 --> 00:57:52,000
so we wouldn't split up.

1272
00:57:52,000 --> 00:57:55,000
I saw a few of them go to another company.

1273
00:57:55,000 --> 00:57:58,000
A few of them joined us,

1274
00:57:58,000 --> 00:58:01,000
so I think that's the end of the project.

1275
00:58:01,000 --> 00:58:04,000
Because you could see that

1276
00:58:04,000 --> 00:58:07,000
everything was similar.

1277
00:58:07,000 --> 00:58:10,000
When you looked at Streamzy and their work,

1278
00:58:10,000 --> 00:58:13,000
it was clear that it couldn't be any different.

1279
00:58:13,000 --> 00:58:16,000
Streamzy was a bit newer,

1280
00:58:16,000 --> 00:58:19,000
a bit more ready.

1281
00:58:19,000 --> 00:58:22,000
For listeners who listen to podcasts,

1282
00:58:22,000 --> 00:58:25,000
Streamzy is an orchestrator for Kafka,

1283
00:58:25,000 --> 00:58:28,000
for Kubernetes.

1284
00:58:28,000 --> 00:58:31,000
You install it through Helm,

1285
00:58:31,000 --> 00:58:34,000
and Kafka will move it

1286
00:58:34,000 --> 00:58:37,000
to your Kubernetes cluster.

1287
00:58:37,000 --> 00:58:40,000
But you still need to have your own Kubernetes cluster.

1288
00:58:40,000 --> 00:58:43,000
Yes, you need a Kubernetes cluster,

1289
00:58:43,000 --> 00:58:46,000
but today you manage Kafka in a Kubernetes cluster.

1290
00:58:46,000 --> 00:58:49,000
It's very elegant and on a high level.

1291
00:58:49,000 --> 00:58:52,000
You run Kafka yourself,

1292
00:58:52,000 --> 00:58:55,000
and Kubernetes is...

1293
00:58:55,000 --> 00:58:58,000
I won't do it for you.

1294
00:58:58,000 --> 00:59:01,000
No, I won't do it for you.

1295
00:59:01,000 --> 00:59:04,000
Can I talk about Quarkus now?

1296
00:59:04,000 --> 00:59:07,000
People are really hyped about it.

1297
00:59:07,000 --> 00:59:10,000
It's true.

1298
00:59:10,000 --> 00:59:13,000
I fell into a bubble again,

1299
00:59:13,000 --> 00:59:16,000
when Aleš called me

1300
00:59:16,000 --> 00:59:19,000
to the Mekit conference,

1301
00:59:19,000 --> 00:59:22,000
and also to the Java conference.

1302
00:59:22,000 --> 00:59:25,000
Quarkus is the way to go.

1303
00:59:25,000 --> 00:59:28,000
It's a new web project,

1304
00:59:28,000 --> 00:59:31,000
and Quarkus is the way to go.

1305
00:59:31,000 --> 00:59:34,000
Maybe I'm biased again,

1306
00:59:34,000 --> 00:59:37,000
but if Spring or Spring Boot dominates...

1307
00:59:37,000 --> 00:59:40,000
How long will it take you to not say

1308
00:59:40,000 --> 00:59:43,000
that it's the way to go?

1309
00:59:43,000 --> 00:59:46,000
If you want to use Java,

1310
00:59:46,000 --> 00:59:49,000
where modern web frameworks are,

1311
00:59:49,000 --> 00:59:52,000
where you can use modern approaches,

1312
00:59:52,000 --> 00:59:55,000
Quarkus dominates somehow.

1313
00:59:55,000 --> 00:59:58,000
Maybe I'm biased,

1314
00:59:58,000 --> 01:00:01,000
but I see it as a part of...

1315
01:00:01,000 --> 01:00:04,000
It's a part of the solution.

1316
01:00:04,000 --> 01:00:07,000
I did the assumption,

1317
01:00:07,000 --> 01:00:10,000
and maybe my listeners will stream it

1318
01:00:10,000 --> 01:00:13,000
and correct me.

1319
01:00:13,000 --> 01:00:16,000
If it's great,

1320
01:00:16,000 --> 01:00:19,000
give me other suggestions.

1321
01:00:19,000 --> 01:00:22,000
Now we'll talk about Quarkus,

1322
01:00:22,000 --> 01:00:25,000
because you work with it the most.

1323
01:00:25,000 --> 01:00:28,000
I've seen the page,

1324
01:00:28,000 --> 01:00:31,000
but I've never used it.

1325
01:00:31,000 --> 01:00:34,000
It seems that Quarkus and Graal.vm

1326
01:00:34,000 --> 01:00:37,000
go hand in hand,

1327
01:00:37,000 --> 01:00:40,000
or that it's a combo you recommend.

1328
01:00:40,000 --> 01:00:43,000
I know the main features,

1329
01:00:43,000 --> 01:00:46,000
why I would use it.

1330
01:00:46,000 --> 01:00:49,000
What are those 3-4 features,

1331
01:00:49,000 --> 01:00:52,000
and why Quarkus is the best

1332
01:00:52,000 --> 01:00:55,000
web framework for the modern world?

1333
01:00:55,000 --> 01:00:58,000
As we mentioned before,

1334
01:00:58,000 --> 01:01:01,000
you had Spring Boot,

1335
01:01:01,000 --> 01:01:04,000
which reduced everything for you,

1336
01:01:04,000 --> 01:01:07,000
but it was still huge.

1337
01:01:07,000 --> 01:01:10,000
Quarkus...

1338
01:01:10,000 --> 01:01:13,000
Spring Boot,

1339
01:01:13,000 --> 01:01:16,000
all the frameworks we've seen,

1340
01:01:16,000 --> 01:01:19,000
all had that problem,

1341
01:01:19,000 --> 01:01:22,000
and they had to scan a bit.

1342
01:01:22,000 --> 01:01:25,000
Then came the annotations,

1343
01:01:25,000 --> 01:01:28,000
and you had to scan the configuration files.

1344
01:01:28,000 --> 01:01:31,000
But it was always scanned.

1345
01:01:31,000 --> 01:01:34,000
The bigger the problem,

1346
01:01:34,000 --> 01:01:37,000
the longer it lasted.

1347
01:01:37,000 --> 01:01:40,000
A lot of defense,

1348
01:01:40,000 --> 01:01:43,000
Quarkus...

1349
01:01:43,000 --> 01:01:46,000
You don't need Graal.vm,

1350
01:01:46,000 --> 01:01:49,000
you just need Graal.vm,

1351
01:01:49,000 --> 01:01:52,000
and it will build as best as it can,

1352
01:01:52,000 --> 01:01:55,000
and most of the time,

1353
01:01:55,000 --> 01:01:58,000
if you don't use it,

1354
01:01:58,000 --> 01:02:01,000
it will build native.

1355
01:02:01,000 --> 01:02:04,000
You can deploy it mechanically.

1356
01:02:04,000 --> 01:02:07,000
Then there's the speed,

1357
01:02:07,000 --> 01:02:10,000
that you don't need to scan anything.

1358
01:02:10,000 --> 01:02:13,000
When you get used to the app,

1359
01:02:13,000 --> 01:02:16,000
you don't need to scan anything.

1360
01:02:16,000 --> 01:02:19,000
You already know what to do,

1361
01:02:19,000 --> 01:02:22,000
and Quarkus does it for you.

1362
01:02:22,000 --> 01:02:25,000
In build time,

1363
01:02:25,000 --> 01:02:28,000
when it scans the whole app,

1364
01:02:28,000 --> 01:02:31,000
you can see what you're using.

1365
01:02:31,000 --> 01:02:34,000
If you're using a reflection,

1366
01:02:34,000 --> 01:02:37,000
you can say this is a reflection,

1367
01:02:37,000 --> 01:02:40,000
and it won't delete it.

1368
01:02:40,000 --> 01:02:43,000
But it also knows

1369
01:02:43,000 --> 01:02:46,000
what you're using.

1370
01:02:46,000 --> 01:02:49,000
For example,

1371
01:02:49,000 --> 01:02:52,000
if you have a huge entity,

1372
01:02:52,000 --> 01:02:55,000
a big table,

1373
01:02:55,000 --> 01:02:58,000
it will prepare everything,

1374
01:02:58,000 --> 01:03:01,000
and it will build a model

1375
01:03:01,000 --> 01:03:04,000
in build time,

1376
01:03:04,000 --> 01:03:07,000
and it will store it in REST,

1377
01:03:07,000 --> 01:03:10,000
in CDI,

1378
01:03:10,000 --> 01:03:13,000
Bean Injection,

1379
01:03:13,000 --> 01:03:16,000
it will know all of that,

1380
01:03:16,000 --> 01:03:19,000
and it will do it in a modern way.

1381
01:03:19,000 --> 01:03:22,000
Quarkus uses it internally.

1382
01:03:22,000 --> 01:03:25,000
Quarkus is a small kernel,

1383
01:03:25,000 --> 01:03:28,000
and then it has extensions.

1384
01:03:28,000 --> 01:03:31,000
Those extensions have two parts,

1385
01:03:31,000 --> 01:03:34,000
build time and run time.

1386
01:03:34,000 --> 01:03:37,000
In build time,

1387
01:03:37,000 --> 01:03:40,000
you can store all of that information.

1388
01:03:40,000 --> 01:03:43,000
In Quarkus,

1389
01:03:43,000 --> 01:03:46,000
it's called eat your own dog food.

1390
01:03:46,000 --> 01:03:49,000
With that kernel,

1391
01:03:49,000 --> 01:03:52,000
you can use those extensions,

1392
01:03:52,000 --> 01:03:55,000
and in build time,

1393
01:03:55,000 --> 01:03:58,000
you can simply add your own extension,

1394
01:03:58,000 --> 01:04:01,000
and another piece of information

1395
01:04:01,000 --> 01:04:04,000
from another store in build time.

1396
01:04:04,000 --> 01:04:07,000
When the application starts,

1397
01:04:07,000 --> 01:04:10,000
all of the binary code is there,

1398
01:04:10,000 --> 01:04:13,000
and it just calls.

1399
01:04:13,000 --> 01:04:16,000
Invocations are crazy fast,

1400
01:04:16,000 --> 01:04:19,000
because it's not scanned.

1401
01:04:19,000 --> 01:04:22,000
If you did something wrong,

1402
01:04:22,000 --> 01:04:25,000
the web application,

1403
01:04:25,000 --> 01:04:28,000
REST, a couple of Beans,

1404
01:04:28,000 --> 01:04:31,000
and maybe some entity,

1405
01:04:31,000 --> 01:04:34,000
it takes less than 100 milliseconds.

1406
01:04:34,000 --> 01:04:37,000
It's incomprehensible.

1407
01:04:37,000 --> 01:04:40,000
If you think about it,

1408
01:04:40,000 --> 01:04:43,000
when we started the application service,

1409
01:04:43,000 --> 01:04:46,000
it was a wild fly that took a few seconds,

1410
01:04:46,000 --> 01:04:49,000
and it was already wild.

1411
01:04:49,000 --> 01:04:52,000
It's not just a Hello World application.

1412
01:04:52,000 --> 01:04:55,000
It's a daily application that takes

1413
01:04:55,000 --> 01:04:58,000
a REST endpoint,

1414
01:04:58,000 --> 01:05:01,000
a Bean injects it,

1415
01:05:01,000 --> 01:05:04,000
and that entity writes it to your database.

1416
01:05:04,000 --> 01:05:07,000
For reference,

1417
01:05:07,000 --> 01:05:10,000
if the web page has more than 200 milliseconds

1418
01:05:10,000 --> 01:05:13,000
of rendering time,

1419
01:05:13,000 --> 01:05:16,000
then people will pay attention.

1420
01:05:16,000 --> 01:05:19,000
100 milliseconds is very important

1421
01:05:19,000 --> 01:05:22,000
for serverless models.

1422
01:05:22,000 --> 01:05:25,000
What do you do with it?

1423
01:05:25,000 --> 01:05:28,000
You run it, turn it off,

1424
01:05:28,000 --> 01:05:31,000
the application is as it should be.

1425
01:05:31,000 --> 01:05:34,000
If we go back to Aquarcus,

1426
01:05:34,000 --> 01:05:37,000
it's good to have extensions.

1427
01:05:37,000 --> 01:05:40,000
It's a bit low-level,

1428
01:05:40,000 --> 01:05:43,000
but you pay attention to it.

1429
01:05:43,000 --> 01:05:46,000
You don't need a lot of knowledge

1430
01:05:46,000 --> 01:05:49,000
to use it.

1431
01:05:49,000 --> 01:05:52,000
With extensions,

1432
01:05:52,000 --> 01:05:55,000
all the main tasks we do

1433
01:05:55,000 --> 01:05:58,000
receive all possible support.

1434
01:05:58,000 --> 01:06:01,000
Plus, Aquarcus has a quirky version

1435
01:06:01,000 --> 01:06:04,000
where the community contributes.

1436
01:06:04,000 --> 01:06:07,000
When we talked about it before,

1437
01:06:07,000 --> 01:06:10,000
why is Aquarcus so good?

1438
01:06:10,000 --> 01:06:13,000
When you think about it,

1439
01:06:13,000 --> 01:06:16,000
you can easily find support for a book.

1440
01:06:16,000 --> 01:06:19,000
Recently, I played and needed

1441
01:06:19,000 --> 01:06:22,000
support for S3 storage.

1442
01:06:22,000 --> 01:06:25,000
I added a dependency

1443
01:06:25,000 --> 01:06:28,000
and I had S3 storage.

1444
01:06:28,000 --> 01:06:31,000
It's very interesting.

1445
01:06:31,000 --> 01:06:34,000
The principle of Aquarcus

1446
01:06:34,000 --> 01:06:37,000
is similar to Dev Services.

1447
01:06:38,000 --> 01:06:41,000
You just need to add

1448
01:06:41,000 --> 01:06:44,000
a certain dependency

1449
01:06:44,000 --> 01:06:47,000
and if you still need

1450
01:06:47,000 --> 01:06:50,000
a service,

1451
01:06:50,000 --> 01:06:53,000
for example a database,

1452
01:06:53,000 --> 01:06:56,000
you need a database

1453
01:06:56,000 --> 01:06:59,000
and then go to Dev Service

1454
01:06:59,000 --> 01:07:02,000
and Aquarcus will take care of it

1455
01:07:02,000 --> 01:07:05,000
from the back.

1456
01:07:06,000 --> 01:07:09,000
It's like a developer container.

1457
01:07:09,000 --> 01:07:12,000
Yes, it's like a container

1458
01:07:12,000 --> 01:07:15,000
that will be taken care of

1459
01:07:15,000 --> 01:07:18,000
and then turned off.

1460
01:07:18,000 --> 01:07:21,000
Or for Kafka, for Base,

1461
01:07:21,000 --> 01:07:24,000
for S3, there's a mini-Io

1462
01:07:24,000 --> 01:07:27,000
Dev Service.

1463
01:07:27,000 --> 01:07:30,000
I realized that I don't need

1464
01:07:30,000 --> 01:07:33,000
to write Dev Services.

1465
01:07:34,000 --> 01:07:37,000
It's great that in the community

1466
01:07:37,000 --> 01:07:40,000
there are already written

1467
01:07:40,000 --> 01:07:43,000
Dev Services.

1468
01:07:43,000 --> 01:07:46,000
How is it verified

1469
01:07:46,000 --> 01:07:49,000
and how do you know

1470
01:07:49,000 --> 01:07:52,000
that the project is good?

1471
01:07:52,000 --> 01:07:55,000
Do you check it?

1472
01:07:55,000 --> 01:07:58,000
Do you have a signing?

1473
01:07:58,000 --> 01:08:01,000
Do you go through a revision?

1474
01:08:01,000 --> 01:08:04,000
Aquarcus ecosystem.

1475
01:08:04,000 --> 01:08:07,000
Yes, Aquarcus ecosystem.

1476
01:08:07,000 --> 01:08:10,000
You would include something

1477
01:08:10,000 --> 01:08:13,000
and you would include something

1478
01:08:13,000 --> 01:08:16,000
that you don't need to maintain

1479
01:08:16,000 --> 01:08:19,000
so you know that it's a quality code.

1480
01:08:19,000 --> 01:08:22,000
That flag is working for the bank.

1481
01:08:22,000 --> 01:08:25,000
For some security mechanism

1482
01:08:25,000 --> 01:08:28,000
when you go through

1483
01:08:28,000 --> 01:08:31,000
some things are unprogrammed

1484
01:08:31,000 --> 01:08:34,000
and you're affected.

1485
01:08:34,000 --> 01:08:37,000
Good question.

1486
01:08:37,000 --> 01:08:40,000
You have Aquarcus

1487
01:08:40,000 --> 01:08:43,000
and Aquarcus is an extension.

1488
01:08:43,000 --> 01:08:46,000
I don't know how we decide

1489
01:08:46,000 --> 01:08:49,000
what goes directly to Aquarcus

1490
01:08:49,000 --> 01:08:52,000
and what goes to Quarkiverse.

1491
01:08:52,000 --> 01:08:55,000
Maybe from Quarkiverse

1492
01:08:55,000 --> 01:08:58,000
you go to Aquarcus.

1493
01:08:58,000 --> 01:09:01,000
What's inside Aquarcus

1494
01:09:01,000 --> 01:09:04,000
is quite strict.

1495
01:09:04,000 --> 01:09:07,000
You go through GitHub,

1496
01:09:07,000 --> 01:09:10,000
pull requests and reviews.

1497
01:09:10,000 --> 01:09:13,000
It's not like at the beginning

1498
01:09:13,000 --> 01:09:16,000
when we had a lot of people

1499
01:09:16,000 --> 01:09:19,000
and we had a lot of tests

1500
01:09:19,000 --> 01:09:22,000
and we had a lot of work.

1501
01:09:22,000 --> 01:09:25,000
My boss said

1502
01:09:25,000 --> 01:09:28,000
if it's not tested, it doesn't work.

1503
01:09:28,000 --> 01:09:31,000
Don't tell me it's bad.

1504
01:09:31,000 --> 01:09:34,000
Half of the things were written

1505
01:09:34,000 --> 01:09:37,000
and half of the things were tested.

1506
01:09:37,000 --> 01:09:40,000
When you go to Aquarcus

1507
01:09:40,000 --> 01:09:43,000
everything has to have a test.

1508
01:09:43,000 --> 01:09:46,000
As many different tests as possible.

1509
01:09:46,000 --> 01:09:49,000
Then you go through a review

1510
01:09:49,000 --> 01:09:52,000
and you have a ping-pong game

1511
01:09:52,000 --> 01:09:55,000
on GitHub.

1512
01:09:55,000 --> 01:09:58,000
It's quite strict.

1513
01:09:58,000 --> 01:10:01,000
I don't know.

1514
01:10:01,000 --> 01:10:04,000
You go through tests

1515
01:10:04,000 --> 01:10:07,000
and they're great.

1516
01:10:07,000 --> 01:10:10,000
Even when you make a lot of requests

1517
01:10:10,000 --> 01:10:13,000
a lot of things happen

1518
01:10:13,000 --> 01:10:16,000
because of the number of tests.

1519
01:10:16,000 --> 01:10:19,000
If you make a request

1520
01:10:19,000 --> 01:10:22,000
you have to look at it.

1521
01:10:22,000 --> 01:10:25,000
If you make a request

1522
01:10:25,000 --> 01:10:28,000
you have to look at it

1523
01:10:28,000 --> 01:10:31,000
because of the effects.

1524
01:10:31,000 --> 01:10:34,000
If you make a request

1525
01:10:34,000 --> 01:10:37,000
it works.

1526
01:10:37,000 --> 01:10:40,000
It's probably a bit slow

1527
01:10:40,000 --> 01:10:43,000
but it works.

1528
01:10:43,000 --> 01:10:46,000
You also have reviews

1529
01:10:46,000 --> 01:10:49,000
but the main thing is

1530
01:10:49,000 --> 01:10:52,000
the incubator.

1531
01:10:52,000 --> 01:10:55,000
For example,

1532
01:10:55,000 --> 01:10:58,000
if I make a request

1533
01:10:58,000 --> 01:11:01,000
I can change it

1534
01:11:01,000 --> 01:11:04,000
but it's the same thing.

1535
01:11:04,000 --> 01:11:07,000
It's interesting to be known.

1536
01:11:07,000 --> 01:11:10,000
Andraž, what is Istio?

1537
01:11:11,000 --> 01:11:14,000
What is Istio?

1538
01:11:14,000 --> 01:11:17,000
You want to make a full mesh

1539
01:11:17,000 --> 01:11:20,000
from inside your containers.

1540
01:11:20,000 --> 01:11:23,000
Explain to me like I'm five.

1541
01:11:23,000 --> 01:11:26,000
Where does Istio work?

1542
01:11:26,000 --> 01:11:29,000
The idea is inside Kubernetes

1543
01:11:29,000 --> 01:11:32,000
between individual services

1544
01:11:32,000 --> 01:11:35,000
to create a communication

1545
01:11:35,000 --> 01:11:38,000
that you can control.

1546
01:11:38,000 --> 01:11:41,000
How do you terminate TLS connections etc.

1547
01:11:41,000 --> 01:11:44,000
It's a kind of end point

1548
01:11:44,000 --> 01:11:47,000
where you make a policy

1549
01:11:47,000 --> 01:11:50,000
which application or service

1550
01:11:50,000 --> 01:11:53,000
you can communicate with.

1551
01:11:53,000 --> 01:11:56,000
You can't automatically add

1552
01:11:56,000 --> 01:11:59,000
network, low-level level

1553
01:11:59,000 --> 01:12:02,000
load balancing, failover,

1554
01:12:02,000 --> 01:12:05,000
tracing, metrics etc.

1555
01:12:06,000 --> 01:12:09,000
But you can add it to this level.

1556
01:12:09,000 --> 01:12:12,000
And if you give priority to Istio

1557
01:12:12,000 --> 01:12:15,000
in your stack

1558
01:12:15,000 --> 01:12:18,000
you don't have to implement it

1559
01:12:18,000 --> 01:12:21,000
in the application code.

1560
01:12:21,000 --> 01:12:24,000
For example,

1561
01:12:24,000 --> 01:12:27,000
I work for Devo.

1562
01:12:27,000 --> 01:12:30,000
You pay for it.

1563
01:12:30,000 --> 01:12:33,000
Without Istio I can't

1564
01:12:34,000 --> 01:12:37,000
and I can quickly

1565
01:12:37,000 --> 01:12:40,000
program what I need.

1566
01:12:40,000 --> 01:12:43,000
And I need a lot of time

1567
01:12:43,000 --> 01:12:46,000
to write a test

1568
01:12:46,000 --> 01:12:49,000
which will help me

1569
01:12:49,000 --> 01:12:52,000
to include Istio nicely

1570
01:12:52,000 --> 01:12:55,000
in the test.

1571
01:12:55,000 --> 01:12:58,000
So you have the whole test suite

1572
01:12:58,000 --> 01:13:01,000
of Istio.

1573
01:13:01,000 --> 01:13:04,000
I don't want to spoil anything

1574
01:13:04,000 --> 01:13:07,000
so I have to add Istio

1575
01:13:07,000 --> 01:13:10,000
in a few other tests.

1576
01:13:10,000 --> 01:13:13,000
I don't want to add Istio

1577
01:13:13,000 --> 01:13:16,000
in a thousand places

1578
01:13:16,000 --> 01:13:19,000
and I want to add Istio

1579
01:13:19,000 --> 01:13:22,000
with Istio and without Istio.

1580
01:13:22,000 --> 01:13:25,000
I would like to go back a little bit.

1581
01:13:25,000 --> 01:13:28,000
In Quarkus it says

1582
01:13:28,000 --> 01:13:31,000
that it combines

1583
01:13:31,000 --> 01:13:34,000
an imperative and reactive

1584
01:13:34,000 --> 01:13:37,000
way of development

1585
01:13:37,000 --> 01:13:40,000
or implementation.

1586
01:13:40,000 --> 01:13:43,000
Can you explain

1587
01:13:43,000 --> 01:13:46,000
what reactive software means

1588
01:13:46,000 --> 01:13:49,000
in Quarkus?

1589
01:13:49,000 --> 01:13:52,000
What does it mean

1590
01:13:52,000 --> 01:13:55,000
to be reactive in Quarkus?

1591
01:13:55,000 --> 01:13:58,000
We already mentioned that.

1592
01:13:58,000 --> 01:14:01,000
But let's talk about Quarkus.

1593
01:14:01,000 --> 01:14:04,000
As we said,

1594
01:14:04,000 --> 01:14:07,000
trading is expensive

1595
01:14:07,000 --> 01:14:10,000
in applications.

1596
01:14:10,000 --> 01:14:13,000
If you need

1597
01:14:13,000 --> 01:14:16,000
all your stack

1598
01:14:16,000 --> 01:14:19,000
or all your application

1599
01:14:19,000 --> 01:14:22,000
if you don't want to use

1600
01:14:22,000 --> 01:14:25,000
a lot of thread,

1601
01:14:25,000 --> 01:14:28,000
every part of the application

1602
01:14:28,000 --> 01:14:31,000
has to be reactive.

1603
01:14:31,000 --> 01:14:34,000
The web has to be reactive

1604
01:14:34,000 --> 01:14:37,000
to use the initial thread

1605
01:14:37,000 --> 01:14:40,000
and then forward it

1606
01:14:40,000 --> 01:14:43,000
and receive a callback.

1607
01:14:43,000 --> 01:14:46,000
When it's done,

1608
01:14:46,000 --> 01:14:49,000
you can send a response.

1609
01:14:49,000 --> 01:14:52,000
If it's not reactive,

1610
01:14:52,000 --> 01:14:55,000
you can finish it.

1611
01:14:55,000 --> 01:14:58,000
But if you have a little bit more...

1612
01:15:00,000 --> 01:15:10,000
Rest, Endpoint, a base, a message to send and so on,

1613
01:15:10,000 --> 01:15:12,000
so that it can be combined.

1614
01:15:12,000 --> 01:15:19,000
It can be Web Endpoint, Reactive, a base.

1615
01:15:19,000 --> 01:15:24,000
There is a need for a hybrid Reactive,

1616
01:15:24,000 --> 01:15:28,000
so that it doesn't block the base.

1617
01:15:28,000 --> 01:15:33,000
We have messaging, Kafka, and so on.

1618
01:15:33,000 --> 01:15:40,000
In Quark, every component that can be rewritten,

1619
01:15:40,000 --> 01:15:45,000
that has a Reactive note, is written in this way.

1620
01:15:45,000 --> 01:15:49,000
It is written in both ways.

1621
01:15:49,000 --> 01:15:53,000
I don't know if it's a good thing to say,

1622
01:15:53,000 --> 01:16:01,000
but it's good in an imperative way.

1623
01:16:01,000 --> 01:16:04,000
For example, when a request comes in,

1624
01:16:04,000 --> 01:16:08,000
it doesn't go through your thread completely.

1625
01:16:08,000 --> 01:16:10,000
If you have a bug somewhere,

1626
01:16:10,000 --> 01:16:12,000
you can do a stack trace,

1627
01:16:12,000 --> 01:16:16,000
and then you can follow what's happening.

1628
01:16:16,000 --> 01:16:22,000
In Reactive, it can be worse.

1629
01:16:22,000 --> 01:16:27,000
You put it in a context of execution in different pools,

1630
01:16:27,000 --> 01:16:29,000
and if something falls out,

1631
01:16:29,000 --> 01:16:32,000
it will fall in the middle.

1632
01:16:32,000 --> 01:16:36,000
In this context, if something happened on the base,

1633
01:16:36,000 --> 01:16:38,000
and it fell out,

1634
01:16:38,000 --> 01:16:42,000
you won't know where it came from,

1635
01:16:42,000 --> 01:16:47,000
what was inside, and so on.

1636
01:16:47,000 --> 01:16:49,000
And also for debugging.

1637
01:16:49,000 --> 01:16:53,000
A debugger would go through the code,

1638
01:16:53,000 --> 01:16:55,000
and if something fell out,

1639
01:16:55,000 --> 01:16:57,000
it would fall out in the context,

1640
01:16:57,000 --> 01:17:00,000
and you wouldn't know where it came from.

1641
01:17:00,000 --> 01:17:02,000
In the context, you would go,

1642
01:17:02,000 --> 01:17:04,000
oh, here I am in the end point,

1643
01:17:04,000 --> 01:17:07,000
these were the parameters that made me

1644
01:17:07,000 --> 01:17:10,000
a null pointer exception, or whatever.

1645
01:17:10,000 --> 01:17:14,000
So, there are pros and cons.

1646
01:17:14,000 --> 01:17:17,000
The whole point of Reactive is that

1647
01:17:17,000 --> 01:17:22,000
the less things you work on,

1648
01:17:22,000 --> 01:17:26,000
and that things happen when you need them,

1649
01:17:26,000 --> 01:17:29,000
and that you have enough information and context

1650
01:17:29,000 --> 01:17:32,000
to execute an operation.

1651
01:17:32,000 --> 01:17:37,000
And the work starts where the user is,

1652
01:17:37,000 --> 01:17:39,000
the user is in the interaction,

1653
01:17:39,000 --> 01:17:41,000
and the lower you can go through the stack,

1654
01:17:41,000 --> 01:17:44,000
the faster and more responsive the work is.

1655
01:17:44,000 --> 01:17:47,000
There are also complications.

1656
01:17:47,000 --> 01:17:50,000
It's like a trade-off.

1657
01:17:50,000 --> 01:17:52,000
Yes, absolutely.

1658
01:17:52,000 --> 01:17:57,000
If you have a lot of requests,

1659
01:17:57,000 --> 01:18:00,000
or a lot of messages to process,

1660
01:18:00,000 --> 01:18:02,000
for example, to get the experience inside,

1661
01:18:02,000 --> 01:18:04,000
and then give it to someone,

1662
01:18:04,000 --> 01:18:07,000
or a lot of requests from the web,

1663
01:18:08,000 --> 01:18:11,000
you will be able to do it differently.

1664
01:18:11,000 --> 01:18:13,000
You can go and make an extension

1665
01:18:13,000 --> 01:18:15,000
for a certain instance.

1666
01:18:15,000 --> 01:18:17,000
With a small set,

1667
01:18:17,000 --> 01:18:21,000
let's say a few hundred threads,

1668
01:18:21,000 --> 01:18:24,000
you can do a lot of things.

1669
01:18:24,000 --> 01:18:26,000
Because you will be giving information,

1670
01:18:26,000 --> 01:18:28,000
you will be smartly programming,

1671
01:18:28,000 --> 01:18:31,000
you will be able to do it.

1672
01:18:31,000 --> 01:18:34,000
If you wanted to do it with an imperative model,

1673
01:18:34,000 --> 01:18:36,000
it wouldn't work.

1674
01:18:36,000 --> 01:18:38,000
Of course, there you will see

1675
01:18:38,000 --> 01:18:41,000
if something goes wrong, or not.

1676
01:18:41,000 --> 01:18:44,000
And that's why various tasks

1677
01:18:44,000 --> 01:18:47,000
were included in the project.

1678
01:18:47,000 --> 01:18:49,000
Practically without any tracing,

1679
01:18:49,000 --> 01:18:51,000
without any metrics,

1680
01:18:51,000 --> 01:18:54,000
without a tight context,

1681
01:18:54,000 --> 01:18:56,000
you can't do it.

1682
01:18:56,000 --> 01:19:00,000
And then there was a problem,

1683
01:19:00,000 --> 01:19:05,000
because we reduce the use of threads,

1684
01:19:05,000 --> 01:19:09,000
but we also bloat the context.

1685
01:19:09,000 --> 01:19:12,000
Because everyone is a bit more balanced.

1686
01:19:12,000 --> 01:19:15,000
And how to do it in a smarter way?

1687
01:19:15,000 --> 01:19:18,000
That's a $1 million question.

1688
01:19:18,000 --> 01:19:21,000
The amount of context

1689
01:19:21,000 --> 01:19:27,000
doesn't affect what you want to achieve.

1690
01:19:27,000 --> 01:19:29,000
In the same context,

1691
01:19:29,000 --> 01:19:31,000
it says that Quarkus is very good

1692
01:19:31,000 --> 01:19:33,000
for event-driven architecture.

1693
01:19:33,000 --> 01:19:35,000
Can you comment on that?

1694
01:19:35,000 --> 01:19:37,000
What do you think about it?

1695
01:19:37,000 --> 01:19:39,000
It's almost like Reactive.

1696
01:19:39,000 --> 01:19:41,000
Reactive is a method,

1697
01:19:41,000 --> 01:19:43,000
and an event is...

1698
01:19:43,000 --> 01:19:45,000
Every request, every message

1699
01:19:45,000 --> 01:19:47,000
can be assigned to an event,

1700
01:19:47,000 --> 01:19:49,000
and then you pass it

1701
01:19:49,000 --> 01:19:52,000
through the Reactive implementation.

1702
01:19:52,000 --> 01:19:54,000
It doesn't depend on...

1703
01:19:54,000 --> 01:19:56,000
It's already asynchronized,

1704
01:19:56,000 --> 01:19:58,000
you can split it,

1705
01:19:58,000 --> 01:20:00,000
go to two,

1706
01:20:00,000 --> 01:20:03,000
join it, and so on.

1707
01:20:03,000 --> 01:20:06,000
Quarkus, as a tool,

1708
01:20:06,000 --> 01:20:09,000
is a very good thing

1709
01:20:09,000 --> 01:20:11,000
that I've noticed,

1710
01:20:11,000 --> 01:20:13,000
and I'm very proud of it.

1711
01:20:13,000 --> 01:20:15,000
It's a tool called Funky.

1712
01:20:15,000 --> 01:20:17,000
I hope I pronounced it correctly.

1713
01:20:17,000 --> 01:20:23,000
It's a support for FAS models,

1714
01:20:23,000 --> 01:20:25,000
Function as a System,

1715
01:20:25,000 --> 01:20:27,000
or Function as an Infrastructure.

1716
01:20:27,000 --> 01:20:30,000
It's a Lambda architecture,

1717
01:20:30,000 --> 01:20:34,000
where your app is just one function.

1718
01:20:34,000 --> 01:20:36,000
You build it, deploy it,

1719
01:20:36,000 --> 01:20:39,000
and then you put it in a managed service.

1720
01:20:39,000 --> 01:20:41,000
I've heard about Funky,

1721
01:20:41,000 --> 01:20:43,000
but I haven't heard about it.

1722
01:20:43,000 --> 01:20:45,000
I think it's the basis

1723
01:20:45,000 --> 01:20:47,000
for our K-Native,

1724
01:20:47,000 --> 01:20:49,000
Serverless.

1725
01:20:49,000 --> 01:20:51,000
Yes, it's called serverless

1726
01:20:51,000 --> 01:20:53,000
for functions.

1727
01:20:53,000 --> 01:20:55,000
I've also noticed that

1728
01:20:55,000 --> 01:20:57,000
there are annotations

1729
01:20:57,000 --> 01:20:59,000
that allow you to

1730
01:20:59,000 --> 01:21:01,000
use only one function

1731
01:21:01,000 --> 01:21:03,000
from your microservice.

1732
01:21:03,000 --> 01:21:05,000
It's a trend in Quarkus.

1733
01:21:05,000 --> 01:21:07,000
It's the basis for our K-Native.

1734
01:21:07,000 --> 01:21:09,000
You have the specification,

1735
01:21:09,000 --> 01:21:11,000
and so on.

1736
01:21:11,000 --> 01:21:13,000
I don't know.

1737
01:21:13,000 --> 01:21:15,000
I have to be careful

1738
01:21:15,000 --> 01:21:17,000
when I'm working

1739
01:21:17,000 --> 01:21:19,000
that I don't destroy

1740
01:21:19,000 --> 01:21:21,000
the K-Native descriptors

1741
01:21:21,000 --> 01:21:23,000
that are generated.

1742
01:21:23,000 --> 01:21:25,000
I've only heard about Funky.

1743
01:21:25,000 --> 01:21:27,000
I haven't heard about it.

1744
01:21:27,000 --> 01:21:29,000
No, Quarkus is something

1745
01:21:29,000 --> 01:21:31,000
that we have from the inside.

1746
01:21:31,000 --> 01:21:33,000
We're a bit different from Quarkus.

1747
01:21:33,000 --> 01:21:35,000
We work not only on

1748
01:21:35,000 --> 01:21:37,000
each of our devices,

1749
01:21:37,000 --> 01:21:39,000
but we also combine

1750
01:21:39,000 --> 01:21:41,000
our devices in a functional

1751
01:21:41,000 --> 01:21:43,000
and smart way.

1752
01:21:43,000 --> 01:21:45,000
I'm working on React,

1753
01:21:45,000 --> 01:21:47,000
which I'm working on

1754
01:21:47,000 --> 01:21:49,000
with Grpc and Kafka.

1755
01:21:49,000 --> 01:21:51,000
Funky, as you've described it,

1756
01:21:51,000 --> 01:21:53,000
is our K-Native.

1757
01:21:53,000 --> 01:21:55,000
I think that

1758
01:21:55,000 --> 01:21:57,000
K-Native

1759
01:21:57,000 --> 01:21:59,000
is one thing,

1760
01:21:59,000 --> 01:22:01,000
but there are

1761
01:22:01,000 --> 01:22:03,000
some specifications

1762
01:22:03,000 --> 01:22:05,000
that you can annotate.

1763
01:22:05,000 --> 01:22:07,000
Your application is portable.

1764
01:22:07,000 --> 01:22:09,000
I have a question, Dražo.

1765
01:22:09,000 --> 01:22:11,000
Did you say what K-Native is?

1766
01:22:11,000 --> 01:22:13,000
I said K-Native.

1767
01:22:13,000 --> 01:22:15,000
You'll see that later.

1768
01:22:15,000 --> 01:22:17,000
That's because you said it.

1769
01:22:17,000 --> 01:22:19,000
I'm like that.

1770
01:22:19,000 --> 01:22:21,000
I don't even know

1771
01:22:21,000 --> 01:22:23,000
what K-Native is.

1772
01:22:23,000 --> 01:22:25,000
I don't know what K-Native is.

1773
01:22:25,000 --> 01:22:27,000
K-Native would be

1774
01:22:27,000 --> 01:22:29,000
an abstraction

1775
01:22:29,000 --> 01:22:31,000
that helps you

1776
01:22:31,000 --> 01:22:33,000
if you have a Kubernetes,

1777
01:22:33,000 --> 01:22:35,000
to deploy your app

1778
01:22:37,000 --> 01:22:39,000
and run it

1779
01:22:39,000 --> 01:22:41,000
in the Kubernetes environment.

1780
01:22:41,000 --> 01:22:43,000
If you have a bigger app

1781
01:22:43,000 --> 01:22:45,000
and you want to say

1782
01:22:45,000 --> 01:22:47,000
now we have this version,

1783
01:22:47,000 --> 01:22:49,000
now I would like a new version

1784
01:22:49,000 --> 01:22:51,000
of the same app, a newer version.

1785
01:22:51,000 --> 01:22:53,000
I would like only a part of the traffic

1786
01:22:53,000 --> 01:22:55,000
to the new version.

1787
01:22:55,000 --> 01:22:57,000
That's something you solve

1788
01:22:57,000 --> 01:22:59,000
with Istio, right?

1789
01:22:59,000 --> 01:23:01,000
Yes, it's cool in this

1790
01:23:01,000 --> 01:23:03,000
related space.

1791
01:23:03,000 --> 01:23:05,000
Maybe you're competitors in this,

1792
01:23:05,000 --> 01:23:07,000
but it's an abstraction

1793
01:23:07,000 --> 01:23:09,000
that can deploy and manage

1794
01:23:09,000 --> 01:23:11,000
versions.

1795
01:23:11,000 --> 01:23:13,000
If you don't have that,

1796
01:23:13,000 --> 01:23:15,000
then you can add

1797
01:23:15,000 --> 01:23:17,000
routing,

1798
01:23:17,000 --> 01:23:19,000
different ways of versioning

1799
01:23:19,000 --> 01:23:21,000
and

1800
01:23:21,000 --> 01:23:23,000
this layer.

1801
01:23:23,000 --> 01:23:25,000
If you're using

1802
01:23:25,000 --> 01:23:27,000
a Google Cloud Platform,

1803
01:23:27,000 --> 01:23:29,000
you have Google Cloud Run,

1804
01:23:29,000 --> 01:23:31,000
which is fully managed in Kubernetes

1805
01:23:31,000 --> 01:23:33,000
and they give you K-Native above that.

1806
01:23:33,000 --> 01:23:35,000
That's their Google Cloud Run

1807
01:23:35,000 --> 01:23:37,000
offering.

1808
01:23:37,000 --> 01:23:39,000
You just transfer it,

1809
01:23:39,000 --> 01:23:41,000
build an app, build a container,

1810
01:23:41,000 --> 01:23:43,000
tell it to go up and K-Native

1811
01:23:43,000 --> 01:23:45,000
and these layers will manage

1812
01:23:45,000 --> 01:23:47,000
everything else.

1813
01:23:47,000 --> 01:23:49,000
Maybe

1814
01:23:49,000 --> 01:23:51,000
Istio is probably in the same space.

1815
01:23:51,000 --> 01:23:53,000
I mean,

1816
01:23:53,000 --> 01:23:55,000
part of it

1817
01:23:55,000 --> 01:23:57,000
you can probably solve

1818
01:23:57,000 --> 01:23:59,000
in a different way.

1819
01:23:59,000 --> 01:24:01,000
It's also true that Kubernetes

1820
01:24:01,000 --> 01:24:03,000
and the whole space is still

1821
01:24:03,000 --> 01:24:05,000
very fast.

1822
01:24:05,000 --> 01:24:07,000
Maybe in the time

1823
01:24:07,000 --> 01:24:09,000
this debate will end.

1824
01:24:09,000 --> 01:24:11,000
It worries me a lot

1825
01:24:11,000 --> 01:24:13,000
that we're still

1826
01:24:13,000 --> 01:24:15,000
complicating the ecosystem.

1827
01:24:15,000 --> 01:24:17,000
But I think we're consolidating everything.

1828
01:24:17,000 --> 01:24:19,000
You can be surprised that Kubernetes

1829
01:24:19,000 --> 01:24:21,000
is more stable.

1830
01:24:21,000 --> 01:24:23,000
It's not about being stable.

1831
01:24:23,000 --> 01:24:25,000
The problem is that it's too complex.

1832
01:24:25,000 --> 01:24:27,000
I mean,

1833
01:24:27,000 --> 01:24:29,000
if there were

1834
01:24:29,000 --> 01:24:31,000
some projects that were

1835
01:24:31,000 --> 01:24:33,000
glued together

1836
01:24:33,000 --> 01:24:35,000
and then banished,

1837
01:24:35,000 --> 01:24:37,000
now there is

1838
01:24:37,000 --> 01:24:39,000
maybe K-Native will win,

1839
01:24:39,000 --> 01:24:41,000
it will dominate.

1840
01:24:41,000 --> 01:24:43,000
I didn't have any feeling

1841
01:24:43,000 --> 01:24:45,000
that Kubernetes was so unstable.

1842
01:24:45,000 --> 01:24:47,000
No, it's not unstable,

1843
01:24:47,000 --> 01:24:49,000
but it's too complex.

1844
01:24:49,000 --> 01:24:51,000
I mean,

1845
01:24:51,000 --> 01:24:53,000
it's highly complex.

1846
01:24:53,000 --> 01:24:55,000
You don't know

1847
01:24:55,000 --> 01:24:57,000
which project you will

1848
01:24:57,000 --> 01:24:59,000
run on Kubernetes.

1849
01:24:59,000 --> 01:25:01,000
In the beginning it was simple,

1850
01:25:01,000 --> 01:25:03,000
then they added features,

1851
01:25:03,000 --> 01:25:05,000
now it's even better

1852
01:25:05,000 --> 01:25:07,000
when you write a book.

1853
01:25:07,000 --> 01:25:09,000
I think that

1854
01:25:09,000 --> 01:25:11,000
I've talked a lot about Kubernetes.

1855
01:25:11,000 --> 01:25:13,000
I hope I'll be able to talk about it.

1856
01:25:13,000 --> 01:25:15,000
I hope you'll listen to it.

1857
01:25:15,000 --> 01:25:17,000
I wish you good health.

1858
01:25:17,000 --> 01:25:19,000
Luka wrote a book about Kubernetes

1859
01:25:19,000 --> 01:25:21,000
and Action, if I'm right.

1860
01:25:21,000 --> 01:25:23,000
Now I'm correcting myself.

1861
01:25:23,000 --> 01:25:25,000
I think he said that the first book

1862
01:25:25,000 --> 01:25:27,000
was about 300 pages.

1863
01:25:27,000 --> 01:25:29,000
This is the new edition,

1864
01:25:29,000 --> 01:25:31,000
which is almost 900 pages long.

1865
01:25:31,000 --> 01:25:33,000
But look,

1866
01:25:33,000 --> 01:25:35,000
this is just the content in Kubernetes.

1867
01:25:35,000 --> 01:25:37,000
The question is

1868
01:25:37,000 --> 01:25:39,000
if there will be anything else.

1869
01:25:43,000 --> 01:25:45,000
The environment is so complicated

1870
01:25:45,000 --> 01:25:47,000
that

1871
01:25:47,000 --> 01:25:49,000
you need to know

1872
01:25:49,000 --> 01:25:51,000
why you need this environment

1873
01:25:51,000 --> 01:25:53,000
and what kind of problem you're solving.

1874
01:25:53,000 --> 01:25:55,000
It's not like

1875
01:25:55,000 --> 01:25:57,000
Kubernetes is

1876
01:25:57,000 --> 01:25:59,000
the solution

1877
01:25:59,000 --> 01:26:01,000
for your problem.

1878
01:26:01,000 --> 01:26:03,000
Additionally,

1879
01:26:03,000 --> 01:26:05,000
you need to know

1880
01:26:05,000 --> 01:26:07,000
where to start.

1881
01:26:07,000 --> 01:26:09,000
It's a big pain.

1882
01:26:13,000 --> 01:26:15,000
That's true,

1883
01:26:15,000 --> 01:26:17,000
but I also think

1884
01:26:17,000 --> 01:26:19,000
that a lot of things

1885
01:26:19,000 --> 01:26:21,000
that are out of the box

1886
01:26:21,000 --> 01:26:23,000
if you don't know they exist,

1887
01:26:23,000 --> 01:26:25,000
if you don't know they work,

1888
01:26:25,000 --> 01:26:27,000
you'll spend a lot of time

1889
01:26:27,000 --> 01:26:29,000
writing it in your app layer.

1890
01:26:29,000 --> 01:26:31,000
Or when we talked about

1891
01:26:31,000 --> 01:26:33,000
service,

1892
01:26:33,000 --> 01:26:35,000
you need to know this part

1893
01:26:35,000 --> 01:26:37,000
and not everything else.

1894
01:26:37,000 --> 01:26:39,000
That's part of it.

1895
01:26:39,000 --> 01:26:41,000
How to design

1896
01:26:41,000 --> 01:26:43,000
a good architecture.

1897
01:26:43,000 --> 01:26:45,000
That's what you need to know.

1898
01:26:45,000 --> 01:26:47,000
How to make a good architecture

1899
01:26:47,000 --> 01:26:49,000
in this world.

1900
01:26:49,000 --> 01:26:51,000
I'm left-handed.

1901
01:26:55,000 --> 01:26:57,000
I remember

1902
01:26:57,000 --> 01:26:59,000
four years ago

1903
01:26:59,000 --> 01:27:01,000
if I'm not mistaken,

1904
01:27:01,000 --> 01:27:03,000
five years ago,

1905
01:27:03,000 --> 01:27:05,000
four times two,

1906
01:27:05,000 --> 01:27:07,000
five years ago,

1907
01:27:07,000 --> 01:27:09,000
I remember

1908
01:27:09,000 --> 01:27:11,000
when we installed

1909
01:27:11,000 --> 01:27:13,000
Netflix stack.

1910
01:27:13,000 --> 01:27:15,000
They wrote it

1911
01:27:15,000 --> 01:27:17,000
in all possible languages.

1912
01:27:17,000 --> 01:27:19,000
All the main tasks

1913
01:27:19,000 --> 01:27:21,000
like load balancing, failover,

1914
01:27:21,000 --> 01:27:23,000
tracing,

1915
01:27:23,000 --> 01:27:25,000
and all the tasks

1916
01:27:25,000 --> 01:27:27,000
supported by Istio.

1917
01:27:27,000 --> 01:27:29,000
They were working on it

1918
01:27:29,000 --> 01:27:31,000
and they could

1919
01:27:31,000 --> 01:27:33,000
write it in all possible languages.

1920
01:27:35,000 --> 01:27:37,000
Jager would be fine,

1921
01:27:37,000 --> 01:27:39,000
open tracing would be fine,

1922
01:27:39,000 --> 01:27:41,000
telemetry would be fine,

1923
01:27:41,000 --> 01:27:43,000
and so on.

1924
01:27:43,000 --> 01:27:45,000
Load balancing

1925
01:27:45,000 --> 01:27:47,000
wasn't right

1926
01:27:47,000 --> 01:27:49,000
and it was clear

1927
01:27:49,000 --> 01:27:51,000
that they won't be able

1928
01:27:51,000 --> 01:27:53,000
to write it anymore.

1929
01:27:53,000 --> 01:27:55,000
The app was nice,

1930
01:27:55,000 --> 01:27:57,000
you can always get stuck

1931
01:27:57,000 --> 01:27:59,000
in bytecode manipulation

1932
01:27:59,000 --> 01:28:01,000
and you hack the byte

1933
01:28:01,000 --> 01:28:03,000
and it goes inside.

1934
01:28:03,000 --> 01:28:05,000
Some things were nicely written

1935
01:28:05,000 --> 01:28:07,000
and there were always some interceptors.

1936
01:28:07,000 --> 01:28:09,000
Interceptors on web,

1937
01:28:09,000 --> 01:28:11,000
interceptors on Bin,

1938
01:28:11,000 --> 01:28:13,000
interceptors on Kafka.

1939
01:28:13,000 --> 01:28:15,000
A lot of things went nicely inside

1940
01:28:15,000 --> 01:28:17,000
and where it didn't,

1941
01:28:17,000 --> 01:28:19,000
there was a byte agent.

1942
01:28:19,000 --> 01:28:21,000
It went inside

1943
01:28:21,000 --> 01:28:23,000
and appeared in Istio

1944
01:28:23,000 --> 01:28:25,000
and we decided

1945
01:28:25,000 --> 01:28:27,000
that we don't need it anymore.

1946
01:28:27,000 --> 01:28:29,000
We'll forget about the booklets

1947
01:28:29,000 --> 01:28:31,000
and we'll give everything to Istio.

1948
01:28:31,000 --> 01:28:33,000
Four years later

1949
01:28:33,000 --> 01:28:35,000
and I practically

1950
01:28:35,000 --> 01:28:37,000
don't see it anywhere.

1951
01:28:37,000 --> 01:28:39,000
I hope we'll be able

1952
01:28:39,000 --> 01:28:41,000
to convince them.

1953
01:28:41,000 --> 01:28:43,000
I don't work with Istio,

1954
01:28:43,000 --> 01:28:45,000
I talk to them

1955
01:28:45,000 --> 01:28:47,000
but I hope

1956
01:28:47,000 --> 01:28:49,000
they'll tell me

1957
01:28:49,000 --> 01:28:51,000
what's Istio and what's that.

1958
01:28:51,000 --> 01:28:53,000
All these problems

1959
01:28:53,000 --> 01:28:55,000
bring you a trade-off

1960
01:28:55,000 --> 01:28:57,000
for which

1961
01:28:57,000 --> 01:28:59,000
you have to decide.

1962
01:28:59,000 --> 01:29:01,000
And then it's

1963
01:29:01,000 --> 01:29:03,000
do you want

1964
01:29:03,000 --> 01:29:05,000
additional complexity

1965
01:29:05,000 --> 01:29:07,000
and will it solve

1966
01:29:07,000 --> 01:29:09,000
your problem

1967
01:29:09,000 --> 01:29:11,000
or will you shoot yourself in the leg?

1968
01:29:11,000 --> 01:29:13,000
And it's easy

1969
01:29:13,000 --> 01:29:15,000
to add complexity.

1970
01:29:15,000 --> 01:29:17,000
It's full of complexity.

1971
01:29:21,000 --> 01:29:23,000
Maybe in this context

1972
01:29:23,000 --> 01:29:25,000
since we're talking

1973
01:29:25,000 --> 01:29:27,000
about Quarkus,

1974
01:29:27,000 --> 01:29:29,000
I don't know,

1975
01:29:29,000 --> 01:29:31,000
you can also split Quarkus

1976
01:29:31,000 --> 01:29:33,000
into JBoss.

1977
01:29:33,000 --> 01:29:35,000
All the projects

1978
01:29:35,000 --> 01:29:37,000
you've worked on

1979
01:29:37,000 --> 01:29:39,000
are huge projects.

1980
01:29:39,000 --> 01:29:41,000
These are really

1981
01:29:41,000 --> 01:29:43,000
big projects.

1982
01:29:43,000 --> 01:29:45,000
JBoss is huge.

1983
01:29:45,000 --> 01:29:47,000
Not only are they huge projects,

1984
01:29:47,000 --> 01:29:49,000
these are projects

1985
01:29:49,000 --> 01:29:51,000
that are massively used.

1986
01:29:51,000 --> 01:29:53,000
Massively used and really huge.

1987
01:29:53,000 --> 01:29:55,000
Can you give

1988
01:29:55,000 --> 01:29:57,000
an example

1989
01:29:57,000 --> 01:29:59,000
to the world

1990
01:29:59,000 --> 01:30:01,000
of people who

1991
01:30:01,000 --> 01:30:03,000
are connected

1992
01:30:03,000 --> 01:30:05,000
to bigger projects

1993
01:30:05,000 --> 01:30:07,000
or who

1994
01:30:07,000 --> 01:30:09,000
want to contribute

1995
01:30:09,000 --> 01:30:11,000
to bigger projects

1996
01:30:11,000 --> 01:30:13,000
or have a challenge

1997
01:30:13,000 --> 01:30:15,000
to go to bigger projects.

1998
01:30:15,000 --> 01:30:17,000
How do you navigate

1999
01:30:17,000 --> 01:30:19,000
such huge codebases?

2000
01:30:19,000 --> 01:30:21,000
How do you load them?

2001
01:30:21,000 --> 01:30:23,000
How do you build a mental model

2002
01:30:23,000 --> 01:30:25,000
of where things are?

2003
01:30:25,000 --> 01:30:27,000
How do things work?

2004
01:30:27,000 --> 01:30:29,000
Do you manually

2005
01:30:29,000 --> 01:30:31,000
select all 10,000 files?

2006
01:30:31,000 --> 01:30:33,000
How do you build a picture

2007
01:30:33,000 --> 01:30:35,000
of those projects

2008
01:30:35,000 --> 01:30:37,000
so you can manage them?

2009
01:30:37,000 --> 01:30:39,000
Can you build on them?

2010
01:30:39,000 --> 01:30:41,000
If you start from scratch,

2011
01:30:41,000 --> 01:30:43,000
it's easier.

2012
01:30:43,000 --> 01:30:45,000
If you start with a project,

2013
01:30:45,000 --> 01:30:47,000
it doesn't grow overnight

2014
01:30:47,000 --> 01:30:49,000
to a million layers.

2015
01:30:49,000 --> 01:30:51,000
It takes some time.

2016
01:30:51,000 --> 01:30:53,000
For example,

2017
01:30:53,000 --> 01:30:55,000
if it's so big

2018
01:30:55,000 --> 01:30:57,000
that I have to

2019
01:30:57,000 --> 01:30:59,000
write my IntelliJ part

2020
01:30:59,000 --> 01:31:01,000
with memory

2021
01:31:01,000 --> 01:31:03,000
to make it work normally,

2022
01:31:03,000 --> 01:31:05,000
you need an orange laptop.

2023
01:31:05,000 --> 01:31:07,000
If you start from scratch,

2024
01:31:07,000 --> 01:31:09,000
it's easier.

2025
01:31:09,000 --> 01:31:11,000
You prepare step by step.

2026
01:31:11,000 --> 01:31:13,000
Sometimes you get lost

2027
01:31:13,000 --> 01:31:15,000
because you have your part

2028
01:31:15,000 --> 01:31:17,000
and they have theirs.

2029
01:31:17,000 --> 01:31:19,000
I haven't been a fan,

2030
01:31:19,000 --> 01:31:21,000
but I've never had time

2031
01:31:21,000 --> 01:31:23,000
to look at it.

2032
01:31:23,000 --> 01:31:25,000
If you start later,

2033
01:31:25,000 --> 01:31:27,000
it's harder.

2034
01:31:27,000 --> 01:31:29,000
You have to find a way

2035
01:31:29,000 --> 01:31:31,000
to look at it

2036
01:31:31,000 --> 01:31:33,000
from the beginning,

2037
01:31:33,000 --> 01:31:35,000
the basics,

2038
01:31:35,000 --> 01:31:37,000
the things you wouldn't do.

2039
01:31:37,000 --> 01:31:39,000
For us,

2040
01:31:39,000 --> 01:31:41,000
a lot of people

2041
01:31:41,000 --> 01:31:43,000
have one thing

2042
01:31:43,000 --> 01:31:45,000
that they know how to do.

2043
01:31:45,000 --> 01:31:47,000
I came from

2044
01:31:47,000 --> 01:31:49,000
a lot of those

2045
01:31:49,000 --> 01:31:51,000
kernel systems,

2046
01:31:51,000 --> 01:31:53,000
class loading,

2047
01:31:53,000 --> 01:31:55,000
so I was familiar

2048
01:31:55,000 --> 01:31:57,000
with Quarkus.

2049
01:31:57,000 --> 01:31:59,000
Then I worked

2050
01:31:59,000 --> 01:32:01,000
with GRPC and Kafka

2051
01:32:01,000 --> 01:32:03,000
and then I focused on that.

2052
01:32:03,000 --> 01:32:05,000
I didn't come

2053
01:32:05,000 --> 01:32:07,000
from the beginning of Quarkus,

2054
01:32:07,000 --> 01:32:09,000
but I got used to it

2055
01:32:09,000 --> 01:32:11,000
and I used it all the time.

2056
01:32:11,000 --> 01:32:13,000
I used it all the time,

2057
01:32:13,000 --> 01:32:15,000
I was interested in it,

2058
01:32:15,000 --> 01:32:17,000
and I think I did a good job.

2059
01:32:17,000 --> 01:32:19,000
You shouldn't give up.

2060
01:32:19,000 --> 01:32:21,000
If you see something

2061
01:32:21,000 --> 01:32:23,000
and you quickly solve it,

2062
01:32:23,000 --> 01:32:25,000
I don't give up

2063
01:32:25,000 --> 01:32:27,000
and I try to do it in a nice way.

2064
01:32:27,000 --> 01:32:29,000
I remember one time

2065
01:32:29,000 --> 01:32:31,000
when I was sitting down

2066
01:32:31,000 --> 01:32:33,000
and I was a bit confused

2067
01:32:33,000 --> 01:32:35,000
about Quarkus.

2068
01:32:35,000 --> 01:32:37,000
I wasn't satisfied,

2069
01:32:37,000 --> 01:32:39,000
so I downloaded the second

2070
01:32:39,000 --> 01:32:41,000
and the third version

2071
01:32:41,000 --> 01:32:43,000
and then I started coding.

2072
01:32:43,000 --> 01:32:45,000
In the beginning,

2073
01:32:45,000 --> 01:32:47,000
when we were alone,

2074
01:32:47,000 --> 01:32:49,000
we found those books

2075
01:32:49,000 --> 01:32:51,000
in the library,

2076
01:32:51,000 --> 01:32:53,000
and then we were alone

2077
01:32:53,000 --> 01:32:55,000
and I was building sources

2078
01:32:55,000 --> 01:32:57,000
and linking them

2079
01:32:57,000 --> 01:32:59,000
and connecting them

2080
01:32:59,000 --> 01:33:01,000
to the IDE.

2081
01:33:01,000 --> 01:33:03,000
Now you have Maven

2082
01:33:03,000 --> 01:33:05,000
and Maven pulls you down

2083
01:33:05,000 --> 01:33:07,000
and you learn how to debug

2084
01:33:07,000 --> 01:33:09,000
and how to jump.

2085
01:33:09,000 --> 01:33:11,000
I hope you didn't skip React.

2086
01:33:11,000 --> 01:33:13,000
I hope you didn't skip React.

2087
01:33:13,000 --> 01:33:15,000
And you jump,

2088
01:33:15,000 --> 01:33:17,000
and you jump from the beginning

2089
01:33:17,000 --> 01:33:19,000
of the application

2090
01:33:19,000 --> 01:33:21,000
when you go through Quarkus

2091
01:33:21,000 --> 01:33:23,000
from the start to the end

2092
01:33:23,000 --> 01:33:25,000
and you look at what's in the stack,

2093
01:33:25,000 --> 01:33:27,000
in the stack trace,

2094
01:33:27,000 --> 01:33:29,000
and you look at what's going on

2095
01:33:29,000 --> 01:33:31,000
behind it.

2096
01:33:31,000 --> 01:33:33,000
You have to be persistent.

2097
01:33:33,000 --> 01:33:35,000
Thank you.

2098
01:33:35,000 --> 01:33:37,000
It's such a big problem

2099
01:33:37,000 --> 01:33:39,000
that I didn't even look at it.

2100
01:33:39,000 --> 01:33:41,000
It was a simple web application.

2101
01:33:41,000 --> 01:33:43,000
It's a complex application

2102
01:33:43,000 --> 01:33:45,000
and when something is called,

2103
01:33:45,000 --> 01:33:47,000
Lambda is connected

2104
01:33:47,000 --> 01:33:49,000
but Lambda also hides problems.

2105
01:33:49,000 --> 01:33:51,000
You know what?

2106
01:33:51,000 --> 01:33:53,000
I want to ask you this.

2107
01:33:55,000 --> 01:33:57,000
When you have people

2108
01:33:57,000 --> 01:33:59,000
who are juniors

2109
01:33:59,000 --> 01:34:01,000
at the beginning of their journey,

2110
01:34:01,000 --> 01:34:03,000
even you,

2111
01:34:03,000 --> 01:34:05,000
when you first started Quarkus Codebase,

2112
01:34:07,000 --> 01:34:09,000
it was also scary for you.

2113
01:34:09,000 --> 01:34:11,000
I'd like to hear

2114
01:34:11,000 --> 01:34:13,000
if it's normal

2115
01:34:13,000 --> 01:34:15,000
that it's such a huge project

2116
01:34:15,000 --> 01:34:17,000
and it's normal

2117
01:34:17,000 --> 01:34:19,000
that at the beginning

2118
01:34:19,000 --> 01:34:21,000
you don't understand it,

2119
01:34:21,000 --> 01:34:23,000
but then you start using it

2120
01:34:23,000 --> 01:34:25,000
and you start getting to know it

2121
01:34:25,000 --> 01:34:27,000
more and more.

2122
01:34:27,000 --> 01:34:29,000
Even when you try

2123
01:34:29,000 --> 01:34:31,000
to understand it.

2124
01:34:31,000 --> 01:34:33,000
I've been doing things like this

2125
01:34:33,000 --> 01:34:35,000
for 16 years,

2126
01:34:35,000 --> 01:34:37,000
big projects like this.

2127
01:34:37,000 --> 01:34:39,000
When I first started

2128
01:34:39,000 --> 01:34:41,000
a year ago,

2129
01:34:41,000 --> 01:34:43,000
I didn't understand anything.

2130
01:34:43,000 --> 01:34:45,000
I didn't know anything.

2131
01:34:45,000 --> 01:34:47,000
And then I started.

2132
01:34:47,000 --> 01:34:49,000
To contribute,

2133
01:34:49,000 --> 01:34:51,000
when we all started,

2134
01:34:51,000 --> 01:34:53,000
I had a bug,

2135
01:34:53,000 --> 01:34:55,000
you didn't work

2136
01:34:55,000 --> 01:34:57,000
and now you look

2137
01:34:57,000 --> 01:34:59,000
and it's not your problem

2138
01:34:59,000 --> 01:35:01,000
that it's not your code

2139
01:35:01,000 --> 01:35:03,000
and your configuration.

2140
01:35:03,000 --> 01:35:05,000
You try a little

2141
01:35:05,000 --> 01:35:07,000
and you fix it.

2142
01:35:07,000 --> 01:35:09,000
You look at it.

2143
01:35:09,000 --> 01:35:11,000
You'll know from that trace

2144
01:35:11,000 --> 01:35:13,000
even if it's a deep reaction

2145
01:35:13,000 --> 01:35:15,000
to you.

2146
01:35:15,000 --> 01:35:17,000
Sometimes there will be a bug

2147
01:35:17,000 --> 01:35:19,000
and it will be very difficult

2148
01:35:19,000 --> 01:35:21,000
to find it.

2149
01:35:21,000 --> 01:35:23,000
I don't know.

2150
01:35:23,000 --> 01:35:25,000
You have to take steps.

2151
01:35:25,000 --> 01:35:27,000
Even if at the beginning

2152
01:35:27,000 --> 01:35:29,000
you seem very dangerous,

2153
01:35:29,000 --> 01:35:31,000
yes, you are on one side,

2154
01:35:31,000 --> 01:35:33,000
but nobody knows everything.

2155
01:35:37,000 --> 01:35:39,000
Even here.

2156
01:35:39,000 --> 01:35:41,000
For us at JBoss

2157
01:35:41,000 --> 01:35:43,000
there were a few people

2158
01:35:43,000 --> 01:35:45,000
like Scott Stark

2159
01:35:45,000 --> 01:35:47,000
and Adrian Brooks.

2160
01:35:47,000 --> 01:35:49,000
They were crazy.

2161
01:35:49,000 --> 01:35:51,000
They probably knew everything.

2162
01:35:51,000 --> 01:35:53,000
The rest didn't.

2163
01:35:53,000 --> 01:35:55,000
Quarkus is a bigger problem.

2164
01:35:55,000 --> 01:35:57,000
Quarkus,

2165
01:35:57,000 --> 01:35:59,000
as I said in the beginning,

2166
01:35:59,000 --> 01:36:01,000
the core of Quarkus

2167
01:36:01,000 --> 01:36:03,000
and how it starts

2168
01:36:03,000 --> 01:36:05,000
is not so big

2169
01:36:05,000 --> 01:36:07,000
because

2170
01:36:07,000 --> 01:36:09,000
it's big because

2171
01:36:09,000 --> 01:36:11,000
it has a few hundred extensions.

2172
01:36:11,000 --> 01:36:13,000
That's what makes it look like that.

2173
01:36:13,000 --> 01:36:15,000
So when you go down to the application

2174
01:36:15,000 --> 01:36:17,000
and you use an extension

2175
01:36:17,000 --> 01:36:19,000
and they use another problem

2176
01:36:19,000 --> 01:36:21,000
and so on, you can get lost quickly.

2177
01:36:21,000 --> 01:36:23,000
Here's a question.

2178
01:36:27,000 --> 01:36:29,000
As a hardcore developer

2179
01:36:29,000 --> 01:36:31,000
on such large projects,

2180
01:36:31,000 --> 01:36:33,000
what are the tools

2181
01:36:33,000 --> 01:36:35,000
you use

2182
01:36:35,000 --> 01:36:37,000
that you can't live with anymore?

2183
01:36:37,000 --> 01:36:39,000
They can be commercial,

2184
01:36:39,000 --> 01:36:41,000
open source.

2185
01:36:41,000 --> 01:36:43,000
In your environment,

2186
01:36:43,000 --> 01:36:45,000
in your work,

2187
01:36:45,000 --> 01:36:47,000
what are the tools

2188
01:36:47,000 --> 01:36:49,000
you can't imagine

2189
01:36:49,000 --> 01:36:51,000
You have to have two bikes.

2190
01:36:51,000 --> 01:36:53,000
Oh, I see.

2191
01:36:53,000 --> 01:36:55,000
A road bike and a mountain bike.

2192
01:36:55,000 --> 01:36:57,000
It's like

2193
01:36:57,000 --> 01:36:59,000
when you go out on a bike

2194
01:36:59,000 --> 01:37:01,000
and then come back in two hours.

2195
01:37:01,000 --> 01:37:03,000
That's a smart question.

2196
01:37:03,000 --> 01:37:05,000
How many kilometers will you do this year?

2197
01:37:05,000 --> 01:37:07,000
Maybe that, and then you'll go up.

2198
01:37:07,000 --> 01:37:09,000
What else?

2199
01:37:09,000 --> 01:37:11,000
I have a feeling that

2200
01:37:11,000 --> 01:37:13,000
I'm having a little fun,

2201
01:37:13,000 --> 01:37:15,000
but because you ride a lot,

2202
01:37:15,000 --> 01:37:17,000
you probably have a lot of time to think.

2203
01:37:17,000 --> 01:37:19,000
Yes, that's true.

2204
01:37:19,000 --> 01:37:21,000
You give yourself a little time

2205
01:37:21,000 --> 01:37:23,000
to think,

2206
01:37:23,000 --> 01:37:25,000
because sometimes

2207
01:37:25,000 --> 01:37:27,000
time just passes by

2208
01:37:27,000 --> 01:37:29,000
and then you can't do anything

2209
01:37:29,000 --> 01:37:31,000
and you just ride a bike.

2210
01:37:31,000 --> 01:37:33,000
The other thing is that

2211
01:37:33,000 --> 01:37:35,000
you don't go to bed for a long time

2212
01:37:35,000 --> 01:37:37,000
and then you get up

2213
01:37:37,000 --> 01:37:39,000
in the middle of the night

2214
01:37:39,000 --> 01:37:41,000
and you go back to it.

2215
01:37:41,000 --> 01:37:43,000
You have time

2216
01:37:43,000 --> 01:37:45,000
when you can't do anything

2217
01:37:45,000 --> 01:37:47,000
and then you breathe a little

2218
01:37:47,000 --> 01:37:49,000
and then you go a little like that.

2219
01:37:49,000 --> 01:37:51,000
But yes, this tool is so interesting.

2220
01:37:51,000 --> 01:37:53,000
First of all,

2221
01:37:53,000 --> 01:37:55,000
you don't need a lot of things.

2222
01:37:55,000 --> 01:37:57,000
What do I have in the terminal?

2223
01:37:57,000 --> 01:37:59,000
I still have an old school.

2224
01:37:59,000 --> 01:38:01,000
If I have any tools

2225
01:38:01,000 --> 01:38:03,000
from the terminal,

2226
01:38:03,000 --> 01:38:05,000
I have a default

2227
01:38:05,000 --> 01:38:07,000
soft terminal.

2228
01:38:07,000 --> 01:38:09,000
I don't download anything special.

2229
01:38:11,000 --> 01:38:13,000
I wrote a few shortcuts

2230
01:38:13,000 --> 01:38:15,000
so that I don't have to type a lot.

2231
01:38:17,000 --> 01:38:19,000
A good IDE,

2232
01:38:19,000 --> 01:38:21,000
IntelliJ.

2233
01:38:21,000 --> 01:38:23,000
Now you have a free version

2234
01:38:23,000 --> 01:38:25,000
for a lot of things

2235
01:38:25,000 --> 01:38:27,000
that you don't need

2236
01:38:27,000 --> 01:38:29,000
in any enterprise.

2237
01:38:29,000 --> 01:38:31,000
A pen-like laptop

2238
01:38:31,000 --> 01:38:33,000
to have a little more memory

2239
01:38:33,000 --> 01:38:35,000
because you need it

2240
01:38:35,000 --> 01:38:37,000
in such a part.

2241
01:38:37,000 --> 01:38:39,000
Because everyone wants

2242
01:38:39,000 --> 01:38:41,000
to always have a mini cube

2243
01:38:41,000 --> 01:38:43,000
and that's it.

2244
01:38:43,000 --> 01:38:45,000
It's so interesting

2245
01:38:45,000 --> 01:38:47,000
that I would need a lot of things.

2246
01:38:47,000 --> 01:38:49,000
All those profilers

2247
01:38:49,000 --> 01:38:51,000
that are up and down

2248
01:38:51,000 --> 01:38:53,000
I would need a lot of things

2249
01:38:53,000 --> 01:38:55,000
but very rarely.

2250
01:38:55,000 --> 01:38:57,000
I also have other teams

2251
01:38:57,000 --> 01:38:59,000
that are performance teams

2252
01:38:59,000 --> 01:39:01,000
and they deal with it.

2253
01:39:01,000 --> 01:39:03,000
The only similar profiler

2254
01:39:03,000 --> 01:39:05,000
that was

2255
01:39:05,000 --> 01:39:07,000
and they are fast

2256
01:39:07,000 --> 01:39:09,000
and want to have a paid one.

2257
01:39:09,000 --> 01:39:11,000
But you need

2258
01:39:11,000 --> 01:39:13,000
through Jstack

2259
01:39:13,000 --> 01:39:15,000
and it dumps the part

2260
01:39:15,000 --> 01:39:17,000
or in the IDE

2261
01:39:17,000 --> 01:39:19,000
you have to

2262
01:39:19,000 --> 01:39:21,000
look at those snapshots

2263
01:39:21,000 --> 01:39:23,000
and that's it.

2264
01:39:23,000 --> 01:39:25,000
IntelliJ is enough for you.

2265
01:39:25,000 --> 01:39:27,000
Yes, a lot more.

2266
01:39:27,000 --> 01:39:29,000
Great.

2267
01:39:29,000 --> 01:39:31,000
Ok.

2268
01:39:31,000 --> 01:39:33,000
Nothing more.

2269
01:39:33,000 --> 01:39:35,000
We will talk about this part

2270
01:39:35,000 --> 01:39:37,000
until the end

2271
01:39:37,000 --> 01:39:39,000
and then we will see

2272
01:39:39,000 --> 01:39:41,000
where we are going.

2273
01:39:41,000 --> 01:39:43,000
We are almost at the destination

2274
01:39:43,000 --> 01:39:45,000
of Slovenia.

2275
01:39:53,000 --> 01:39:55,000
Open source

2276
01:39:55,000 --> 01:39:57,000
doesn't work without community.

2277
01:39:57,000 --> 01:39:59,000
It's somehow connected.

2278
01:40:00,000 --> 01:40:05,360
between people, and it doesn't work without people who contribute, who push for the development.

2279
01:40:05,360 --> 01:40:17,760
In Slovenia, there is a community OpenBlend, which is currently the largest Java, JVM, meetup, or community in Slovenia.

2280
01:40:17,760 --> 01:40:18,639
The only one.

2281
01:40:18,639 --> 01:40:20,639
The only one, yes.

2282
01:40:22,639 --> 01:40:28,879
Where do you decide what OpenBlend is, how long have you been doing it, where do you decide?

2283
01:40:29,760 --> 01:40:34,320
I will tell you about it in my forum, Levanski.

2284
01:40:34,320 --> 01:40:36,320
There goes another spongebob.

2285
01:40:36,320 --> 01:40:38,320
Yeah, yeah, we forgot about him.

2286
01:40:40,320 --> 01:40:42,320
He will drink the beer himself.

2287
01:40:44,320 --> 01:40:46,320
No, with all the things we talked about...

2288
01:40:46,320 --> 01:40:48,320
But was it decided in advance?

2289
01:40:48,320 --> 01:40:50,320
I mean, was it decided in the beginning?

2290
01:40:50,320 --> 01:40:52,320
I don't think so.

2291
01:40:54,320 --> 01:40:56,320
What is OpenBlend?

2292
01:40:56,720 --> 01:40:58,720
So, OpenBlend is...

2293
01:40:58,720 --> 01:41:02,720
I think we are at the end of 2007.

2294
01:41:02,720 --> 01:41:04,720
I joined RedHat in 2006.

2295
01:41:04,720 --> 01:41:06,720
I was already an open source,

2296
01:41:06,720 --> 01:41:10,720
mostly everything I worked on was open source.

2297
01:41:12,720 --> 01:41:14,720
And I joined RedHat with those guys from Parsec,

2298
01:41:14,720 --> 01:41:18,720
who later joined me and RedHat.

2299
01:41:20,720 --> 01:41:22,720
We were already thinking,

2300
01:41:23,120 --> 01:41:27,120
that it would be a problem for us to get employees.

2301
01:41:29,120 --> 01:41:31,120
The best way to do that is

2302
01:41:33,120 --> 01:41:35,120
to prepare a meeting,

2303
01:41:35,120 --> 01:41:37,120
a conference,

2304
01:41:37,120 --> 01:41:39,120
to get to know each other,

2305
01:41:39,120 --> 01:41:41,120
to get to know each other,

2306
01:41:41,120 --> 01:41:43,120
on a monthly basis.

2307
01:41:43,120 --> 01:41:45,120
When we started,

2308
01:41:45,120 --> 01:41:47,120
every conference was a bit the same,

2309
01:41:47,120 --> 01:41:49,120
if we talk about development.

2310
01:41:49,120 --> 01:41:51,120
We were not OpenBlend,

2311
01:41:51,519 --> 01:41:53,519
we were Vest and Parsec.

2312
01:41:53,519 --> 01:41:55,519
We organized a meeting

2313
01:41:55,519 --> 01:41:57,519
in Ljubljana.

2314
01:41:57,519 --> 01:41:59,519
It was a great event.

2315
01:42:01,519 --> 01:42:03,519
And surprisingly,

2316
01:42:03,519 --> 01:42:05,519
there were 150 of us.

2317
01:42:05,519 --> 01:42:07,519
We were there the whole time.

2318
01:42:09,520 --> 01:42:11,520
You knew Java 1.2,

2319
01:42:11,520 --> 01:42:13,520
and you went to the meeting?

2320
01:42:13,520 --> 01:42:15,520
No, it was just for listening.

2321
01:42:15,520 --> 01:42:17,520
It was for everything.

2322
01:42:17,520 --> 01:42:19,520
It was hardcore.

2323
01:42:19,919 --> 01:42:21,919
The idea was,

2324
01:42:21,919 --> 01:42:23,919
that the conference would be

2325
01:42:23,919 --> 01:42:25,919
as we would like it to be.

2326
01:42:27,919 --> 01:42:29,919
No bullshit PR,

2327
01:42:29,919 --> 01:42:31,919
no marketing,

2328
01:42:31,919 --> 01:42:33,919
just hardcore in Java.

2329
01:42:35,919 --> 01:42:37,919
To get programmers

2330
01:42:37,919 --> 01:42:39,919
who do it,

2331
01:42:39,919 --> 01:42:41,919
and you can teach them.

2332
01:42:45,919 --> 01:42:47,919
Good food,

2333
01:42:48,320 --> 01:42:50,320
good company,

2334
01:42:50,320 --> 01:42:52,320
good beer,

2335
01:42:52,320 --> 01:42:54,320
and so on.

2336
01:42:54,320 --> 01:42:56,320
At every moment,

2337
01:42:56,320 --> 01:42:58,320
you can find a hardcore developer,

2338
01:42:58,320 --> 01:43:00,320
and you can get him

2339
01:43:00,320 --> 01:43:02,320
even if he is not as good as you.

2340
01:43:04,320 --> 01:43:06,320
We got such people,

2341
01:43:06,320 --> 01:43:08,320
that it was hard to get them

2342
01:43:08,320 --> 01:43:10,320
from the sky,

2343
01:43:10,320 --> 01:43:12,320
when they were talking about their projects.

2344
01:43:14,320 --> 01:43:16,320
When we did that,

2345
01:43:16,720 --> 01:43:18,720
we were like,

2346
01:43:18,720 --> 01:43:20,720
let's get some people.

2347
01:43:20,720 --> 01:43:22,720
I went there,

2348
01:43:22,720 --> 01:43:24,720
and I got a few people.

2349
01:43:24,720 --> 01:43:26,720
I don't know who is drinking,

2350
01:43:26,720 --> 01:43:28,720
who is crying,

2351
01:43:28,720 --> 01:43:30,720
what is it about?

2352
01:43:30,720 --> 01:43:32,720
You are a one man band,

2353
01:43:32,720 --> 01:43:34,720
and we are an open blend.

2354
01:43:34,720 --> 01:43:36,720
We want to distance ourselves

2355
01:43:36,720 --> 01:43:38,720
from individuals like us.

2356
01:43:38,720 --> 01:43:40,720
We want to make a society,

2357
01:43:40,720 --> 01:43:42,720
and a society for everyone.

2358
01:43:42,720 --> 01:43:44,720
A society of protocols,

2359
01:43:45,119 --> 01:43:47,119
and a society for everyone.

2360
01:43:47,119 --> 01:43:49,119
We got together,

2361
01:43:49,119 --> 01:43:51,119
and we said,

2362
01:43:51,119 --> 01:43:53,119
that it would be better

2363
01:43:53,119 --> 01:43:55,119
if we could get some sponsorship.

2364
01:43:55,119 --> 01:43:57,119
Not to get a lot of money,

2365
01:43:57,119 --> 01:43:59,119
but to give something.

2366
01:43:59,119 --> 01:44:01,119
People gave us money,

2367
01:44:01,119 --> 01:44:03,119
and we were like,

2368
01:44:03,119 --> 01:44:05,119
okay, cool.

2369
01:44:05,119 --> 01:44:07,119
We got so many people,

2370
01:44:07,119 --> 01:44:09,119
that we could do monthly events,

2371
01:44:09,119 --> 01:44:11,119
like Café Babe,

2372
01:44:11,119 --> 01:44:13,119
and conferences.

2373
01:44:13,520 --> 01:44:15,520
We were spreading from one track

2374
01:44:15,520 --> 01:44:17,519
to two tracks,

2375
01:44:17,519 --> 01:44:19,519
from two tracks to three tracks,

2376
01:44:19,519 --> 01:44:21,519
and back and forth.

2377
01:44:21,519 --> 01:44:23,519
But we were spreading.

2378
01:44:23,519 --> 01:44:25,519
At one point,

2379
01:44:25,519 --> 01:44:27,519
Oracle bought Sun,

2380
01:44:27,519 --> 01:44:29,519
and I bought Java.

2381
01:44:29,519 --> 01:44:31,519
Sjok,

2382
01:44:31,519 --> 01:44:33,519
the Slovenian Oracle user group,

2383
01:44:33,519 --> 01:44:35,519
was also involved,

2384
01:44:35,519 --> 01:44:37,519
so they were helping a bit.

2385
01:44:37,519 --> 01:44:39,519
And we were already

2386
01:44:39,519 --> 01:44:41,519
splitting up,

2387
01:44:41,920 --> 01:44:43,920
because they were

2388
01:44:43,920 --> 01:44:45,920
Oracle's partners,

2389
01:44:45,920 --> 01:44:47,920
and we were the rest.

2390
01:44:47,920 --> 01:44:49,920
But we got together

2391
01:44:49,920 --> 01:44:51,920
as a group,

2392
01:44:51,920 --> 01:44:53,920
and they were

2393
01:44:53,920 --> 01:44:55,920
normal people,

2394
01:44:55,920 --> 01:44:57,920
not like Oracle,

2395
01:44:57,920 --> 01:44:59,920
Fama, Gart,

2396
01:44:59,920 --> 01:45:01,920
etc.

2397
01:45:01,920 --> 01:45:03,920
They changed a lot,

2398
01:45:03,920 --> 01:45:05,920
and in the last few years,

2399
01:45:05,920 --> 01:45:07,920
we've been doing

2400
01:45:07,920 --> 01:45:09,920
2.8, 2.9,

2401
01:45:10,320 --> 01:45:12,320
and from 2.10 to 2.15,

2402
01:45:12,320 --> 01:45:14,320
we've been an open band.

2403
01:45:14,320 --> 01:45:16,320
We've been together as an open band

2404
01:45:16,320 --> 01:45:18,320
and Sjok,

2405
01:45:18,320 --> 01:45:20,320
and we're still singing history.

2406
01:45:20,320 --> 01:45:22,320
Before Corona,

2407
01:45:22,320 --> 01:45:24,320
it was phenomenal,

2408
01:45:24,320 --> 01:45:26,320
I've never seen so many people.

2409
01:45:26,320 --> 01:45:28,320
In the beginning,

2410
01:45:28,320 --> 01:45:30,320
we went from Ljubljana to Jable,

2411
01:45:30,320 --> 01:45:32,320
from Jable to the beach,

2412
01:45:32,320 --> 01:45:34,320
and from the beach we went,

2413
01:45:34,320 --> 01:45:36,320
I think,

2414
01:45:36,320 --> 01:45:38,320
once or twice,

2415
01:45:38,720 --> 01:45:40,720
to the beach,

2416
01:45:40,720 --> 01:45:42,720
because it wasn't fancy.

2417
01:45:42,720 --> 01:45:44,720
Then we went to Portorožje,

2418
01:45:44,720 --> 01:45:46,720
and Portorožje is a winner.

2419
01:45:46,720 --> 01:45:48,720
Before Corona,

2420
01:45:48,720 --> 01:45:50,720
there were 400 people,

2421
01:45:50,720 --> 01:45:52,720
it was crazy.

2422
01:45:52,720 --> 01:45:54,720
Corona slowed us down a bit.

2423
01:45:54,720 --> 01:45:56,720
But we're good with that.

2424
01:45:56,720 --> 01:45:58,720
We always played in October,

2425
01:45:58,720 --> 01:46:00,720
and now we went in June,

2426
01:46:00,720 --> 01:46:02,720
and it was even better,

2427
01:46:02,720 --> 01:46:04,720
it was warm,

2428
01:46:04,720 --> 01:46:06,720
and people come to work.

2429
01:46:07,119 --> 01:46:09,119
We try to keep the concept alive.

2430
01:46:13,119 --> 01:46:15,119
We, as an open band,

2431
01:46:15,119 --> 01:46:17,119
keep the concept alive,

2432
01:46:17,119 --> 01:46:19,119
and when things get better,

2433
01:46:19,119 --> 01:46:21,119
we go to the beach,

2434
01:46:21,119 --> 01:46:23,119
and that's how it all started.

2435
01:46:23,119 --> 01:46:25,119
All the big companies

2436
01:46:25,119 --> 01:46:27,119
started to show up,

2437
01:46:27,119 --> 01:46:29,119
like Evangelists,

2438
01:46:29,119 --> 01:46:31,119
and when you want to get someone,

2439
01:46:31,119 --> 01:46:33,119
you try to contact Evangelists,

2440
01:46:33,119 --> 01:46:35,119
and you have to ask

2441
01:46:35,519 --> 01:46:37,519
to get a cover.

2442
01:46:37,519 --> 01:46:39,519
I know them personally,

2443
01:46:39,519 --> 01:46:41,519
but I can't ask them all.

2444
01:46:41,519 --> 01:46:43,519
I don't know all of them,

2445
01:46:43,519 --> 01:46:45,519
and I can't ask them

2446
01:46:45,519 --> 01:46:47,519
to sing for me.

2447
01:46:47,519 --> 01:46:49,519
But the concept is still

2448
01:46:49,519 --> 01:46:51,519
quite similar,

2449
01:46:51,519 --> 01:46:53,519
I would say.

2450
01:46:53,519 --> 01:46:55,519
Developers, Evangelists,

2451
01:46:55,519 --> 01:46:57,519
a lot of things,

2452
01:46:57,519 --> 01:46:59,519
and you know who to turn to.

2453
01:46:59,519 --> 01:47:01,519
Good food,

2454
01:47:01,519 --> 01:47:03,519
and a good evening.

2455
01:47:05,519 --> 01:47:07,519
I would also like

2456
01:47:07,519 --> 01:47:09,519
to thank Sky Union

2457
01:47:09,519 --> 01:47:11,519
for the Make It conference.

2458
01:47:15,519 --> 01:47:17,519
The speakers were very good,

2459
01:47:17,519 --> 01:47:19,519
and the engineers were very good.

2460
01:47:19,519 --> 01:47:21,519
There were some people

2461
01:47:21,519 --> 01:47:23,519
who came to sell

2462
01:47:23,519 --> 01:47:25,519
fake tickets,

2463
01:47:25,519 --> 01:47:27,519
which is fine,

2464
01:47:27,519 --> 01:47:29,519
but I don't know,

2465
01:47:29,519 --> 01:47:31,519
there were people from Oracle Labs

2466
01:47:31,519 --> 01:47:33,519
from the Danube,

2467
01:47:33,920 --> 01:47:35,920
who have a PhD,

2468
01:47:35,920 --> 01:47:37,920
and they program Oracle,

2469
01:47:37,920 --> 01:47:39,920
VM, whatever,

2470
01:47:39,920 --> 01:47:41,920
and everyone talked,

2471
01:47:41,920 --> 01:47:43,920
because they were very approachable.

2472
01:47:43,920 --> 01:47:45,920
It was very good,

2473
01:47:45,920 --> 01:47:47,920
I would say.

2474
01:47:47,920 --> 01:47:49,920
I recommend

2475
01:47:49,920 --> 01:47:51,920
that people go to these events.

2476
01:47:51,920 --> 01:47:53,920
Honestly,

2477
01:47:53,920 --> 01:47:55,920
I notice that

2478
01:47:55,920 --> 01:47:57,920
the older population

2479
01:47:57,920 --> 01:47:59,920
goes to these events.

2480
01:47:59,920 --> 01:48:01,920
I would like to see more students,

2481
01:48:02,320 --> 01:48:04,320
younger population,

2482
01:48:04,320 --> 01:48:06,320
but here.

2483
01:48:06,320 --> 01:48:08,320
Be approachable

2484
01:48:08,320 --> 01:48:10,320
at these conferences.

2485
01:48:10,320 --> 01:48:12,320
JVM is not that sexy.

2486
01:48:12,320 --> 01:48:14,320
No, no.

2487
01:48:14,320 --> 01:48:16,320
Maybe

2488
01:48:16,320 --> 01:48:18,320
we should commit to the conference.

2489
01:48:18,320 --> 01:48:20,320
What else will you do?

2490
01:48:20,320 --> 01:48:22,320
You had a meet-up,

2491
01:48:22,320 --> 01:48:24,320
I saw that a few years ago

2492
01:48:24,320 --> 01:48:26,320
on Kimber Peep's archive,

2493
01:48:26,320 --> 01:48:28,320
there were 12 recordings

2494
01:48:28,320 --> 01:48:30,320
of you talking about J-Boss.

2495
01:48:30,720 --> 01:48:32,719
All of them.

2496
01:48:32,719 --> 01:48:34,719
Yes, all of them.

2497
01:48:34,719 --> 01:48:36,719
What else

2498
01:48:36,719 --> 01:48:38,719
are you preparing for this month?

2499
01:48:40,719 --> 01:48:42,719
We finally slept a bit,

2500
01:48:42,719 --> 01:48:44,719
during the summer,

2501
01:48:44,719 --> 01:48:46,719
as always,

2502
01:48:46,719 --> 01:48:48,719
and every time

2503
01:48:48,719 --> 01:48:50,719
we have some free time,

2504
01:48:50,719 --> 01:48:52,719
from Kimber Peep to Polygon,

2505
01:48:52,719 --> 01:48:54,719
when we have nowhere to go,

2506
01:48:54,719 --> 01:48:56,719
we lack a bit of motivation,

2507
01:48:56,719 --> 01:48:58,719
but

2508
01:48:59,119 --> 01:49:01,119
in Ljubljana,

2509
01:49:01,119 --> 01:49:03,119
there are some places

2510
01:49:03,119 --> 01:49:05,119
suitable for that.

2511
01:49:05,119 --> 01:49:07,119
So, on November 24th,

2512
01:49:07,119 --> 01:49:09,119
which is

2513
01:49:09,119 --> 01:49:11,119
almost...

2514
01:49:11,119 --> 01:49:13,119
We will see when we will go out.

2515
01:49:13,119 --> 01:49:15,119
November 24th,

2516
01:49:15,119 --> 01:49:17,119
you will be here

2517
01:49:17,119 --> 01:49:19,119
in Ljubljana Tech,

2518
01:49:19,119 --> 01:49:21,119
in BTC,

2519
01:49:21,119 --> 01:49:23,119
Oto will give us the link.

2520
01:49:23,119 --> 01:49:25,119
We will give all the links.

2521
01:49:25,119 --> 01:49:27,119
We will start the season

2522
01:49:27,520 --> 01:49:29,520
with OpenBlend.

2523
01:49:29,520 --> 01:49:31,520
We will have a place

2524
01:49:31,520 --> 01:49:33,520
in Aquarcus,

2525
01:49:33,520 --> 01:49:35,520
but with some slides

2526
01:49:35,520 --> 01:49:37,520
and some technical details.

2527
01:49:37,520 --> 01:49:39,520
We will show some codes.

2528
01:49:39,520 --> 01:49:41,520
And Oto will be here.

2529
01:49:41,520 --> 01:49:43,520
Yes, Oto will be here.

2530
01:49:43,520 --> 01:49:45,520
It's interesting,

2531
01:49:45,520 --> 01:49:47,520
this Ljubljana Tech

2532
01:49:47,520 --> 01:49:49,520
is such an interesting place.

2533
01:49:49,520 --> 01:49:51,520
They worked hard

2534
01:49:51,520 --> 01:49:53,520
and it's worth a visit.

2535
01:49:53,520 --> 01:49:55,520
Then you decide

2536
01:49:55,919 --> 01:49:57,919
if that's it or

2537
01:49:57,919 --> 01:49:59,919
you are still struggling.

2538
01:49:59,919 --> 01:50:01,919
I would like to add

2539
01:50:01,919 --> 01:50:03,919
that

2540
01:50:03,919 --> 01:50:05,919
in the community,

2541
01:50:05,919 --> 01:50:07,919
you have meetups

2542
01:50:07,919 --> 01:50:09,919
and conferences.

2543
01:50:09,919 --> 01:50:11,919
But the point

2544
01:50:11,919 --> 01:50:13,919
is not only in those.

2545
01:50:13,919 --> 01:50:15,919
The point is in the community

2546
01:50:15,919 --> 01:50:17,919
to meet other people

2547
01:50:17,919 --> 01:50:19,919
who work in these ecosystems,

2548
01:50:19,919 --> 01:50:21,919
who work in these technologies,

2549
01:50:21,919 --> 01:50:23,919
to solve problems and questions.

2550
01:50:24,320 --> 01:50:26,320
I would like to add

2551
01:50:26,320 --> 01:50:28,320
that you are a very open

2552
01:50:28,320 --> 01:50:30,320
community.

2553
01:50:30,320 --> 01:50:32,320
As far as I know you

2554
01:50:32,320 --> 01:50:34,320
you are a Red Hat guy.

2555
01:50:34,320 --> 01:50:36,320
Well, beer is healthy.

2556
01:50:36,320 --> 01:50:38,320
And it's expensive.

2557
01:50:38,320 --> 01:50:40,320
Yes, but with milk

2558
01:50:40,320 --> 01:50:42,320
it will be even better.

2559
01:50:42,320 --> 01:50:44,320
Only with milk

2560
01:50:44,320 --> 01:50:46,320
it will be difficult.

2561
01:50:46,320 --> 01:50:48,320
I was a bit surprised

2562
01:50:48,320 --> 01:50:50,320
when we had

2563
01:50:50,320 --> 01:50:52,320
all those events

2564
01:50:52,719 --> 01:50:54,719
and when we

2565
01:50:54,719 --> 01:50:56,719
organized everything.

2566
01:50:56,719 --> 01:50:58,719
My co-workers

2567
01:50:58,719 --> 01:51:00,719
were not programmers

2568
01:51:00,719 --> 01:51:02,719
but they were former programmers

2569
01:51:02,719 --> 01:51:04,719
and then they had a community guy

2570
01:51:04,719 --> 01:51:06,719
and they innovated a bit.

2571
01:51:06,719 --> 01:51:08,719
Dimitri Senket

2572
01:51:08,719 --> 01:51:10,719
had a very good lecture

2573
01:51:10,719 --> 01:51:12,719
on how to become an open source contributor.

2574
01:51:12,719 --> 01:51:14,719
And then there was

2575
01:51:14,719 --> 01:51:16,719
a party and that's it.

2576
01:51:16,719 --> 01:51:18,719
We didn't have a good day.

2577
01:51:18,719 --> 01:51:20,719
More people didn't

2578
01:51:21,119 --> 01:51:23,119
come.

2579
01:51:23,119 --> 01:51:25,119
There were five of us

2580
01:51:25,119 --> 01:51:27,119
and then four of us

2581
01:51:27,119 --> 01:51:29,119
went to do something else.

2582
01:51:29,119 --> 01:51:31,119
Various people

2583
01:51:31,119 --> 01:51:33,119
came.

2584
01:51:33,119 --> 01:51:35,119
We didn't...

2585
01:51:35,119 --> 01:51:37,119
Well,

2586
01:51:37,119 --> 01:51:39,119
when we met

2587
01:51:39,119 --> 01:51:41,119
we didn't really talk

2588
01:51:41,119 --> 01:51:43,119
but they told us that

2589
01:51:43,119 --> 01:51:45,119
we came from a community.

2590
01:51:45,119 --> 01:51:47,119
We met on some other lines

2591
01:51:47,119 --> 01:51:49,119
and then we debated.

2592
01:51:49,520 --> 01:51:51,520
They found me

2593
01:51:51,520 --> 01:51:53,520
and I told them that I'm a fan

2594
01:51:53,520 --> 01:51:55,520
and that I'm a good guy.

2595
01:51:55,520 --> 01:51:57,520
Lazo came to me

2596
01:51:57,520 --> 01:51:59,520
and he convinced me

2597
01:51:59,520 --> 01:52:01,520
and we started to work together.

2598
01:52:01,520 --> 01:52:03,520
I helped him a bit

2599
01:52:03,520 --> 01:52:05,520
and he's still happy.

2600
01:52:05,520 --> 01:52:07,520
If he was here

2601
01:52:07,520 --> 01:52:09,520
we could do it.

2602
01:52:09,520 --> 01:52:11,520
You contribute a bit

2603
01:52:11,520 --> 01:52:13,520
you see yourself.

2604
01:52:13,520 --> 01:52:15,520
You contribute more and more

2605
01:52:15,520 --> 01:52:17,520
and then you need it

2606
01:52:17,919 --> 01:52:19,919
when you need

2607
01:52:19,919 --> 01:52:21,919
to be together.

2608
01:52:23,919 --> 01:52:25,919
Now the question is

2609
01:52:25,919 --> 01:52:27,919
what is

2610
01:52:27,919 --> 01:52:29,919
the current state

2611
01:52:29,919 --> 01:52:31,919
in which the world is

2612
01:52:31,919 --> 01:52:33,919
in terms of hiring etc.

2613
01:52:33,919 --> 01:52:35,919
Please,

2614
01:52:35,919 --> 01:52:37,919
this will be the last question.

2615
01:52:39,919 --> 01:52:41,919
Well,

2616
01:52:43,919 --> 01:52:45,919
many years ago

2617
01:52:46,320 --> 01:52:48,320
we had some advantages

2618
01:52:48,320 --> 01:52:50,320
because we were almost single

2619
01:52:50,320 --> 01:52:52,320
and it was a remote culture.

2620
01:52:56,320 --> 01:52:58,320
We were encouraged

2621
01:52:58,320 --> 01:53:00,320
to work remotely

2622
01:53:00,320 --> 01:53:02,320
very easily.

2623
01:53:02,320 --> 01:53:04,320
It wasn't like now

2624
01:53:04,320 --> 01:53:06,320
when there was corona

2625
01:53:06,320 --> 01:53:08,320
and everyone could work from home.

2626
01:53:08,320 --> 01:53:10,320
The majority of people

2627
01:53:10,320 --> 01:53:12,320
who work at Middleware

2628
01:53:12,320 --> 01:53:14,320
are at home.

2629
01:53:14,719 --> 01:53:16,719
We don't have many

2630
01:53:16,719 --> 01:53:18,719
developers

2631
01:53:18,719 --> 01:53:20,719
in the world.

2632
01:53:20,719 --> 01:53:22,719
They are at home

2633
01:53:22,719 --> 01:53:24,719
and it was very

2634
01:53:24,719 --> 01:53:26,719
attractive.

2635
01:53:28,719 --> 01:53:30,719
In recent decades

2636
01:53:30,719 --> 01:53:32,719
the world has changed

2637
01:53:32,719 --> 01:53:34,719
and now I imagine

2638
01:53:34,719 --> 01:53:36,719
that we are not as sexy

2639
01:53:36,719 --> 01:53:38,719
as we used to be.

2640
01:53:38,719 --> 01:53:40,719
It doesn't surprise me

2641
01:53:40,719 --> 01:53:42,719
that people don't call me

2642
01:53:43,119 --> 01:53:45,119
because

2643
01:53:45,119 --> 01:53:47,119
only a few people

2644
01:53:47,119 --> 01:53:49,119
can get a job

2645
01:53:49,119 --> 01:53:51,119
for half a year

2646
01:53:51,119 --> 01:53:53,119
or even more money.

2647
01:53:53,119 --> 01:53:55,119
At that time

2648
01:53:55,119 --> 01:53:57,119
you could move

2649
01:53:57,119 --> 01:53:59,119
through Lusatia

2650
01:53:59,119 --> 01:54:01,119
or somewhere else

2651
01:54:01,119 --> 01:54:03,119
where you already had

2652
01:54:03,119 --> 01:54:05,119
big spaces

2653
01:54:05,119 --> 01:54:07,119
or you were at home

2654
01:54:07,119 --> 01:54:09,119
in your own environment

2655
01:54:09,119 --> 01:54:11,119
and that was it.

2656
01:54:11,520 --> 01:54:13,520
It didn't surprise me

2657
01:54:13,520 --> 01:54:15,520
that much.

2658
01:54:15,520 --> 01:54:17,520
In 2013-2014

2659
01:54:17,520 --> 01:54:19,520
we were at Viško

2660
01:54:19,520 --> 01:54:21,520
and I remember

2661
01:54:21,520 --> 01:54:23,520
that it was a very popular

2662
01:54:23,520 --> 01:54:25,520
and well-known project

2663
01:54:25,520 --> 01:54:27,520
in the world

2664
01:54:27,520 --> 01:54:29,520
and for us.

2665
01:54:29,520 --> 01:54:31,520
Lukša helped me

2666
01:54:31,520 --> 01:54:33,520
to work.

2667
01:54:33,520 --> 01:54:35,520
We were like hipsters

2668
01:54:35,520 --> 01:54:37,520
but outside

2669
01:54:37,520 --> 01:54:39,520
it was ok

2670
01:54:39,919 --> 01:54:41,919
Join OpenBlend

2671
01:54:41,919 --> 01:54:43,919
if you are interested

2672
01:54:43,919 --> 01:54:45,919
in Java and JVM

2673
01:54:45,919 --> 01:54:47,919
like everyone else.

2674
01:54:47,919 --> 01:54:49,919
Come to these events

2675
01:54:49,919 --> 01:54:51,919
because they are very open.

2676
01:54:51,919 --> 01:54:53,919
Ališ will greet you

2677
01:54:53,919 --> 01:54:55,919
and tell you how he talked.

2678
01:54:57,919 --> 01:54:59,919
Come!

2679
01:54:59,919 --> 01:55:01,919
Last question.

2680
01:55:01,919 --> 01:55:03,919
What did you ask him?

2681
01:55:03,919 --> 01:55:05,919
You said that you forgot

2682
01:55:05,919 --> 01:55:07,919
the last question.

2683
01:55:08,320 --> 01:55:10,320
No,

2684
01:55:10,320 --> 01:55:12,320
roadmap.

2685
01:55:12,320 --> 01:55:14,320
What is on the roadmap?

2686
01:55:14,320 --> 01:55:16,320
What is interesting?

2687
01:55:16,320 --> 01:55:18,320
What is waiting for us

2688
01:55:18,320 --> 01:55:20,320
in the next few years?

2689
01:55:20,320 --> 01:55:22,320
Maybe Red Hat

2690
01:55:22,320 --> 01:55:24,320
or

2691
01:55:24,320 --> 01:55:26,320
projects that you are working on?

2692
01:55:26,320 --> 01:55:28,320
Red Hat

2693
01:55:28,320 --> 01:55:30,320
is asking

2694
01:55:30,320 --> 01:55:32,320
that

2695
01:55:32,320 --> 01:55:34,320
we should not talk

2696
01:55:34,320 --> 01:55:36,320
we are not

2697
01:55:36,719 --> 01:55:38,719
we are not like

2698
01:55:38,719 --> 01:55:40,719
Google

2699
01:55:40,719 --> 01:55:42,719
First of all,

2700
01:55:42,719 --> 01:55:44,719
there are problems

2701
01:55:44,719 --> 01:55:46,719
but

2702
01:55:46,719 --> 01:55:48,719
for us

2703
01:55:48,719 --> 01:55:50,719
it is

2704
01:55:50,719 --> 01:55:52,719
Qarkus 3

2705
01:55:52,719 --> 01:55:54,719
that will have

2706
01:55:54,719 --> 01:55:56,719
two problems

2707
01:55:56,719 --> 01:55:58,719
one is Jakarta specification

2708
01:55:58,719 --> 01:56:00,719
that is micro problems

2709
01:56:00,719 --> 01:56:02,719
like

2710
01:56:02,719 --> 01:56:04,719
Java Enterprise

2711
01:56:05,119 --> 01:56:07,119
so that we can

2712
01:56:07,119 --> 01:56:09,119
Jakarta Qarkus

2713
01:56:09,119 --> 01:56:11,119
when it gets hot.

2714
01:56:11,119 --> 01:56:13,119
The other is

2715
01:56:13,119 --> 01:56:15,119
Project LUM

2716
01:56:15,119 --> 01:56:17,119
that is

2717
01:56:17,119 --> 01:56:19,119
because

2718
01:56:19,119 --> 01:56:21,119
the whole Qarkus

2719
01:56:21,119 --> 01:56:23,119
has a lot of written problems

2720
01:56:23,119 --> 01:56:25,119
like Reactive

2721
01:56:25,119 --> 01:56:27,119
Neti, above Neti is Vertex

2722
01:56:27,119 --> 01:56:29,119
and that is what enables

2723
01:56:29,119 --> 01:56:31,119
Reactivity.

2724
01:56:31,119 --> 01:56:33,119
Now we are losing these problems

2725
01:56:33,520 --> 01:56:35,520
and we need

2726
01:56:35,520 --> 01:56:37,520
to see

2727
01:56:37,520 --> 01:56:39,520
if Qarkus 4

2728
01:56:39,520 --> 01:56:41,520
or Qarkus 5

2729
01:56:41,520 --> 01:56:43,520
will be Qarkus

2730
01:56:43,520 --> 01:56:45,520
or Lumus

2731
01:56:45,520 --> 01:56:47,520
or something like that.

2732
01:56:47,520 --> 01:56:49,520
That is an interesting question

2733
01:56:49,520 --> 01:56:51,520
for us.

2734
01:56:51,520 --> 01:56:53,520
Because it will be for sure.

2735
01:56:53,520 --> 01:56:55,520
Those fundamental

2736
01:56:55,520 --> 01:56:57,520
changes will be lower

2737
01:56:57,520 --> 01:56:59,520
in terms of opportunities.

2738
01:56:59,520 --> 01:57:01,520
Yes, that is the future

2739
01:57:01,919 --> 01:57:03,919
If the trading model

2740
01:57:03,919 --> 01:57:05,920
will be replaced

2741
01:57:05,920 --> 01:57:07,920
so that you will not need

2742
01:57:07,920 --> 01:57:09,920
to work with virtual trading

2743
01:57:09,920 --> 01:57:11,920
imperatively

2744
01:57:11,920 --> 01:57:13,920
then everything will fall off.

2745
01:57:15,920 --> 01:57:17,920
Ok.

2746
01:57:17,920 --> 01:57:19,920
Exciting.

2747
01:57:19,920 --> 01:57:21,920
I will give you one last thought

2748
01:57:21,920 --> 01:57:23,920
and then we will finish.

2749
01:57:23,920 --> 01:57:25,920
One last thought.

2750
01:57:25,920 --> 01:57:27,920
What would I say to the world?

2751
01:57:28,319 --> 01:57:30,319
Yes.

2752
01:57:30,319 --> 01:57:32,319
Let's go for a beer.

2753
01:57:32,319 --> 01:57:34,319
No, no.

2754
01:57:34,319 --> 01:57:36,319
No,

2755
01:57:36,319 --> 01:57:38,319
I mean

2756
01:57:38,319 --> 01:57:40,319
Open Source

2757
01:57:40,319 --> 01:57:42,319
gave me a lot

2758
01:57:42,319 --> 01:57:44,319
and then you can live with it.

2759
01:57:44,319 --> 01:57:46,319
It is not just a service anymore

2760
01:57:46,319 --> 01:57:48,319
but it is a way of life

2761
01:57:48,319 --> 01:57:50,319
for me.

2762
01:57:50,319 --> 01:57:52,319
I never wanted

2763
01:57:52,319 --> 01:57:54,319
to choose something else

2764
01:57:54,319 --> 01:57:56,319
but I had some offers

2765
01:57:56,719 --> 01:57:58,719
from big companies.

2766
01:57:58,719 --> 01:58:00,719
Living at home

2767
01:58:00,719 --> 01:58:02,719
or living in a car

2768
01:58:02,719 --> 01:58:04,719
has its advantages

2769
01:58:04,719 --> 01:58:06,719
but if you see the world

2770
01:58:06,719 --> 01:58:08,719
it is also more stressful.

2771
01:58:08,719 --> 01:58:10,719
I organized my time

2772
01:58:10,719 --> 01:58:12,719
so that I can live

2773
01:58:12,719 --> 01:58:14,719
outside of work

2774
01:58:14,719 --> 01:58:16,719
with high quality.

2775
01:58:16,719 --> 01:58:18,719
Open Source

2776
01:58:18,719 --> 01:58:20,719
gave me a lot

2777
01:58:20,719 --> 01:58:22,719
and I got to know

2778
01:58:22,719 --> 01:58:24,719
a lot of interesting people

2779
01:58:25,119 --> 01:58:27,119
who are passionate

2780
01:58:27,119 --> 01:58:29,119
about their work.

2781
01:58:29,119 --> 01:58:31,119
You can see

2782
01:58:31,119 --> 01:58:33,119
why they are

2783
01:58:33,119 --> 01:58:35,119
so talented

2784
01:58:35,119 --> 01:58:37,119
and well made.

2785
01:58:37,119 --> 01:58:39,119
When you get to know

2786
01:58:39,119 --> 01:58:41,119
people like Gavin King

2787
01:58:41,119 --> 01:58:43,119
it is very interesting.

2788
01:58:43,119 --> 01:58:45,119
There are also

2789
01:58:45,119 --> 01:58:47,119
a lot of people

2790
01:58:47,119 --> 01:58:49,119
who I have already mentioned

2791
01:58:49,119 --> 01:58:51,119
a few times

2792
01:58:51,119 --> 01:58:53,119
who taught me a lot

2793
01:58:53,520 --> 01:58:55,520
Adrian Brock

2794
01:58:55,520 --> 01:58:57,520
you took me

2795
01:58:57,520 --> 01:58:59,520
under your wing

2796
01:58:59,520 --> 01:59:01,520
and I grew a lot with them

2797
01:59:01,520 --> 01:59:03,520
and you are also

2798
01:59:03,520 --> 01:59:05,520
a very fascinating person

2799
01:59:05,520 --> 01:59:07,520
who you never know

2800
01:59:07,520 --> 01:59:09,520
but you know about Gavin King

2801
01:59:09,520 --> 01:59:11,520
and you meet him

2802
01:59:11,520 --> 01:59:13,520
in the middle of the road.

2803
01:59:13,520 --> 01:59:15,520
Don't be afraid

2804
01:59:15,520 --> 01:59:17,520
to adjust to Open Source

2805
01:59:17,520 --> 01:59:19,520
because one or two bugs

2806
01:59:19,520 --> 01:59:21,520
will join you.

2807
01:59:21,920 --> 01:59:23,920
We are not the only ones

2808
01:59:23,920 --> 01:59:25,920
we are the biggest

2809
01:59:25,920 --> 01:59:27,920
Open Source in the world

2810
01:59:27,920 --> 01:59:29,920
but we are not

2811
01:59:29,920 --> 01:59:31,920
the only ones.

2812
01:59:31,920 --> 01:59:33,920
Aleš Justin

2813
01:59:33,920 --> 01:59:35,920
thank you for your time

2814
01:59:35,920 --> 01:59:37,920
and your contribution

2815
01:59:37,920 --> 01:59:39,920
to Open Source

2816
01:59:39,920 --> 01:59:41,920
and thank you

2817
01:59:41,920 --> 01:59:43,920
for your time.

2818
01:59:43,920 --> 01:59:45,920
If you liked this episode

2819
01:59:45,920 --> 01:59:47,920
please share it with your friends

2820
01:59:47,920 --> 01:59:49,920
give us some feedback

2821
01:59:50,319 --> 01:59:52,319
and see you

2822
01:59:52,319 --> 01:59:54,319
next time.

2823
01:59:54,319 --> 01:59:56,319
Good luck

2824
01:59:56,319 --> 01:59:58,319
and goodbye.